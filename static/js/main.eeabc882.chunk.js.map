{"version":3,"sources":["serviceWorker.js","actions/actions.js","components/NavBar.js","components/SideBar.js","helpers/generalHelpers.js","components/Loading.js","containers/navigation/ManagerDash.js","components/Landing.js","helpers/scheduleHelpers.js","helpers/ClientSearch.js","containers/packages/BuySellPackageForm.js","containers/schedule/SessionForm.js","containers/schedule/ScheduleContainer.js","containers/users/UserForm.js","containers/users/UsersContainer.js","containers/users/UserProfile.js","containers/packages/AddEditPackageForm.js","containers/packages/PackagesContainer.js","containers/navigation/Settings.js","containers/navigation/Signup.js","containers/navigation/Login.js","components/MainBody.js","components/Main.js","App.js","reducers/scheduleReducer.js","reducers/userReducer.js","reducers/appReducer.js","reducers/rootReducer.js","index.js"],"names":["Boolean","window","location","hostname","match","setUser","user","dispatch","type","payload","setUsers","users","userType","setSessions","sessions","setUserLoading","flag","setAllLoading","initialFetch","getClients","id","getRecentSessions","getTrainers","fetch","API","then","res","json","data","levels","getLevels","packages","getPackages","client_packages","getClientPackages","url","getSessions","updateUser","addPackage","pack","updatePackage","deletePackage","connect","undefined","withRouter","props","className","Menu","position","Item","name","onClick","history","push","Icon","Dropdown","item","icon","simple","Divider","localStorage","removeItem","state","activeItem","app","activePage","setActivePage","page","info","schedule","to","trainers","clients","getInfo","handleClick","e","value","vertical","as","Link","active","getFullName","person","first_name","last_name","getDayString","date","getFullYear","getMonth","getDate","getUserFromId","all","find","t","getTimeString","hrs","getHours","length","concat","mins","getMinutes","getSessionsSold","map","session_count","reduce","sum","count","getSessionCount","backDate","filter","session","Date","daytime","getTopPerformer","max","current","isNewClient","client","getTimes","year","setFullYear","month","setMonth","week","setDate","getDay","isAvailable","thisSession","ses","client_id","trainer_id","status","start1","len1","start2","len2","end1","setMinutes","end2","overlap","findClientByName","first","split","last","getAge","years","today","now","dob","Math","getLevelOptions","level","key","text","getClientPackageOptions","all_cps","cps","client_package","expiration","cp","package","title","Loading","full","Dimmer","Loader","nonsegment","Segment","ManagerDash","times","getSessionStats","topTrainer","allTrainers","allSessions","topClient","allClients","newClients","sessionsSold","clientPackages","created_at","renderStats","time","stats","allLoading","Grid","Column","Card","Content","Header","inverted","Feed","Event","Summary","Statistic","Group","horizontal","size","Value","Label","href","Extra","renderTimes","Object","keys","columns","Row","this","Component","renderDash","getResources","trainer","train","getEvents","end","start","resourceId","getTrainerOptions","getClientOptions","ClientSearch","isLoading","searchResults","searchValue","handleClientSearchSelect","result","setClient","setState","handleClientSearchChange","clientsWithTitle","setTimeout","re","RegExp","_","escapeRegExp","test","Search","placeholder","loading","onResultSelect","onSearchChange","debounce","leading","results","BuySellPackageForm","package_id","errors","handleChange","target","handleSubmit","preventDefault","exp","exp_weeks","soldPackage","method","headers","body","JSON","stringify","resp","sellPackage","toggleForm","renderErrors","error","i","console","log","selling","Form","onSubmit","attached","Select","onChange","options","Button","primary","form","goBack","SessionForm","editSession","client_package_id","showPackForm","isNew","newSession","parseInt","addSession","obj","decreaseSessionCount","updateSession","handleStatus","confirm","renderPackageForm","renderPackageChoices","packOptions","secondary","string","toUpperCase","slice","widths","trainerOptions","c","inline","Input","toISOString","Field","Radio","label","checked","cancelSession","updated","cp_id","localizer","momentLocalizer","moment","defaultSession","ScheduleContainer","views","day","showForm","enterNew","setData","includes","handleSlotSelect","handleEventSelect","s","handleTrainerSelect","trains","clientOptions","selection","selectable","onSelectEvent","onSelectSlot","defaultView","Views","DAY","step","scrollToTime","min","events","resources","startAccessor","endAccessor","UserForm","editUser","gender","email","phone","newUser","level_id","password","base_url","end_url","addUser","levelOptions","deleteUser","defaultUser","UsersContainer","path","toLowerCase","searchName","viewProfile","back","allUsers","u","handleSearchChange","renderUsers","currentUser","sort","a","b","localeCompare","editForm","addForm","Meta","Description","extra","renderForm","renderAddButton","UserProfile","renderClient","List","renderUserList","renderPackages","renderTrainer","showEdit","width","Image","src","alt","colums","AddEditPackageForm","price","newPackage","handleDelete","editPack","PackagesContainer","showPopup","renderPopup","renderLevelPackages","packs","package_button","content","subheader","Settings","old_password","new_password","new_password_confirm","success","handleErrors","handleResponse","updateAcct","accept","password_confirmation","new_password_confirmation","updateProfile","Step","fluid","completed","Title","Signup","password_confirm","event","pwObject","user_id","catch","Login","renderLanding","renderClients","routerProps","params","edit","renderTrainers","exact","render","userLoading","App","Authorization","defaultState","scheduleReducer","action","newSessions","index","findIndex","userReducer","newArray","rootReducer","combineReducers","appReducer","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eeabc882.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { API } from '../App'\n\n// SETTERS =======================================\n\nexport function setUser(user, dispatch){\n    return {type: \"SET_USER\", payload: user }\n}\n\nexport function setUsers(dispatch, users, userType){\n    return {type: \"SET_USERS\", payload: {users, userType} }\n}\n    \nexport function setSessions(sessions){\n    return {type: \"SET_SESSIONS\", payload: sessions }\n}\n\nexport function setLevels(levels){\n    return {type: \"SET_LEVELS\", payload: levels }\n}\n\nexport function setClientPackages(client_packages){\n    return {type: \"SET_CLIENT_PACKAGES\", payload: client_packages }\n}\n\nexport function setPackages(packages){\n    return {type: \"SET_PACKAGES\", payload: packages }\n}\n\nexport function setActivePage(page){\n    return {type: \"SET_ACTIVEPAGE\", payload: page }\n}\n\nexport function setUserLoading(flag){\n    return {type: \"SET_USER_LOADING\", payload: flag}\n}\n\nexport function setAllLoading(flag){\n\n    return {type: \"SET_ALL_LOADING\", payload: flag}\n}\n\n\n// GETTERS ==================================\n\nexport function initialFetch(user) {\n    return function(dispatch){\n        switch(user.type){\n            case \"Trainer\": //get this trianers clients and sessions, set trainers to this user\n              getClients(dispatch, user.id, user)\n              getRecentSessions(dispatch, user.id)\n              setUsers(dispatch, [user], \"Trainer\")\n              break\n            case \"Client\": // get this client's session and trainers, set clients to this user\n              getTrainers(dispatch, user.id, user)\n              getRecentSessions(dispatch, user.id)\n              setUsers(dispatch, [user], \"Client\")\n              break\n            default: // Get all of everything...for manager\n              getClients(dispatch, null, user)\n              getTrainers(dispatch)\n              getRecentSessions(dispatch)\n              break\n          }\n\n          // get all the levels\n          getLevels(dispatch)\n          // get all the packages\n          getPackages(dispatch)\n          // get all client-packages\n          getClientPackages(dispatch)\n\n\n          //now go back and get alll the sessions\n          // Loading will likely be set to false much sooner\n          // after the clients are fetched\n          \n    }\n}\n\nexport function getLevels(dispatch){\n    fetch(`${API}/levels`)\n    .then(res => res.json())\n    .then(data => {\n        dispatch(setLevels(data.levels))\n    })\n}\n\nexport function getClientPackages(dispatch){\n    fetch(`${API}/client_packages`)\n    .then(res => res.json())\n    .then(data => {\n        dispatch(setClientPackages(data.client_packages))\n    })\n}\n\nexport function getPackages(dispatch){\n    fetch(`${API}/packages`)\n    .then(res => res.json())\n    .then(data => {\n        dispatch(setPackages(data.packages))\n    })\n}\n\nexport function getRecentSessions(dispatch, id = null){\n    let url = id ? `${API}/recentusersessions/${id}` : `${API}/recentsessions`\n        fetch(url)\n        .then(res => res.json())\n        .then(data => {\n\n            dispatch(setSessions(data.sessions))\n        })\n}\nexport function getSessions(dispatch, id = null){\n    let url = id ? `${API}/usersessions/${id}` : `${API}/sessions`\n        fetch(url)\n        .then(res => res.json())\n        .then(data => {\n\n            dispatch(setSessions(data.sessions))\n        })\n}\n\nexport function getClients(dispatch, id = null, user){\n    let url = id ? `${API}/userclients/${id}` : `${API}/clients`\n        fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            dispatch(setUsers(dispatch, data.users, \"Client\"))\n            dispatch(setAllLoading(false))\n            switch(user.type){\n                case \"Trainer\": \n                  getSessions(dispatch, user.id)\n                  break\n                case \"Client\": \n                  getSessions(dispatch, user.id)\n                  break\n                default:\n                  getSessions(dispatch)\n                  break\n            }\n        })\n}\n\nexport function getTrainers(dispatch, id = null, user){\n    let url = id ? `${API}/usertrainers/${id}` : `${API}/trainers`\n        fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            dispatch(setUsers(dispatch, data.users, \"Trainer\"))\n            if(id){ \n                dispatch(setAllLoading(false))\n                switch(user.type){\n                    case \"Trainer\": \n                      getSessions(dispatch, user.id)\n                      break\n                    case \"Client\": \n                      getSessions(dispatch, user.id)\n                      break\n                    default:\n                      getSessions(dispatch)\n                      break\n                }\n            } \n        })\n}\n\n// CRUD =================================================\nexport function addUser(user, userType){\n    return {type: \"ADD_USER\", payload: {user, userType}}\n}    \n\nexport function updateUser(user, userType){\n    return {type: \"UPDATE_USER\", payload: {user, userType}}\n}\nexport function deleteUser(id, userType){\n    return {type: \"DELETE_USER\", payload: {id, userType}}\n}\n\nexport function addSession(session){\n    return {type: \"ADD_SESSION\", payload: session}\n}    \n\nexport function updateSession(session){\n    return {type: \"UPDATE_SESSION\", payload: session}\n}    \n\nexport function cancelSession(session){\n    let updated = {...session}\n    updated.status = \"cancelled\"\n    return {type: \"UPDATE_SESSION\", payload: updated}\n}    \n\n\nexport function addLevel(level){\n    return {type: \"ADD_LEVEL\", payload: level}\n}    \n\nexport function updateLevel(level){\n    return {type: \"UPDATE_LEVEL\", payload: level}\n}    \n\nexport function deleteLevel(id){\n    return {type: \"UPDATE_LEVEL\", payload: id}\n}    \n\n\nexport function addPackage(pack){\n    return {type: \"ADD_PACKAGE\", payload: pack}\n}    \n\nexport function updatePackage(pack){\n    return {type: \"UPDATE_PACKAGE\", payload: pack}\n}    \n\nexport function deletePackage(id){\n    return {type: \"DELETE_PACKAGE\", payload: id}\n}    \n\nexport function sellPackage(client_package){\n    return {type: \"ADD_CLIENT_PACKAGE\", payload: client_package}\n}    \n\nexport function decreaseSessionCount(cp_id){\n    return {type: \"DECREASE_SESSIONS\", payload: cp_id}\n}    \n\n\n\n","import React from 'react';\nimport { Menu, Icon, Dropdown } from 'semantic-ui-react';\nimport { withRouter} from 'react-router-dom';\nimport { connect } from 'react-redux' \n\nimport { setUser } from '../actions/actions'\n\nconst NavBar = props => {\n  \n  const handleHomeClick = () =>{\n    props.history.push('/')\n  }\n  const handleAcctClick = () =>{\n    props.history.push('/settings')\n  }\n\n  const handleLogout = () =>{\n    localStorage.removeItem(\"user_id\")\n    props.setUser({})\n  }\n\n  return (\n    <div className=\"nav\">\n      <Menu >\n        <Menu.Menu position=\"left\">\n          <Menu.Item\n            name='home'\n            onClick={handleHomeClick}\n          ><Icon name=\"target\"/></Menu.Item>\n        </Menu.Menu>  \n        <Menu.Menu position='right'>\n          <Dropdown item icon='user' simple>\n            <Dropdown.Menu>\n              {/* <Dropdown.Item>\n                <Icon name='dropdown' />\n                <span className='text'>New</span>\n                <Dropdown.Menu>\n                  <Dropdown.Item>Session</Dropdown.Item>\n                  <Dropdown.Item>Trainer</Dropdown.Item>\n                  <Dropdown.Item>Client</Dropdown.Item>\n                  <Dropdown.Item>Manager</Dropdown.Item>\n                </Dropdown.Menu>\n              </Dropdown.Item> */}\n              <Dropdown.Item onClick={handleAcctClick}>Settings</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item\n              onClick={handleLogout}>Logout</Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n          </Menu.Menu>\n      </Menu>\n      \n    </div>\n  );\n};\n\nconst mdp = (dispatch) =>{\n  return {\n    setUser: (user) => dispatch(setUser(user, dispatch))\n  }\n}\n\n\nexport default connect(undefined, mdp)(withRouter(NavBar));\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport { Menu} from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\n\nimport { setActivePage } from '../actions/actions'\n\nconst SideBar = (props) => {\n  \n    const getInfo = () => {\n        switch(props.type){\n            case \"Manager\":\n                return {\n                    schedule: {name: \"Schedule\", to: \"/schedule\"},\n                    trainers: {name: \"Trainers\", to: \"/trainers\"},\n                    clients: {name: \"Clients\", to: \"/clients\"},\n                    packages: {name: \"Manage Packages\", to: \"/packages\"}\n                }\n            case \"Trainer\":\n                return {\n                    schedule: {name: \"My Schedule\", to: \"/schedule\"},\n                    trainers: {name:  \"My Profile\", to: \"/\"},\n                    clients: {name: \"My Clients\", to: \"/clients\"},\n                    packages: {name: \"Sell Packages\", to: \"/packages\"}\n                }\n            case \"Client\":\n                return {\n                    schedule: {name: \"My Schedule\", to: \"/schedule\"},\n                    trainers: {name: \"My Trainers\", to: \"/trainers\"},\n                    clients: {name: \"My Profile\", to: \"/\"},\n                    packages: {name: \"Buy Packages\", to: \"/packages\"}\n                }\n            default:\n                return {\n                    schedule: {name: \"Schedule\", to: \"/schedule\"},\n                    trainers: {name: \"Trainers\", to: \"/trainers\"},\n                    clients: {name: \"Clients\", to: \"/clients\"},\n                    packages: {name: \"Packages\", to: \"/packages\"}\n                }\n        }\n    }\n\n    const info = getInfo() \n    \n    const handleClick = (e, {value}) => {\n        props.setActivePage(value)\n    }\n\n    return (\n        <div className=\"sideBar\">\n            <Menu vertical>\n                <Menu.Item\n                as={Link} to='/landing'\n                value='dashboard'\n                onClick = {handleClick}\n                active={props.activeItem === 'dashboard'}\n                >\n                Dashboard\n                </Menu.Item>\n                <Menu.Item\n                as={Link} to={info.schedule.to}\n                value=\"schedule\"\n                onClick = {handleClick}\n                active={props.activeItem === 'schedule'}\n                >\n                {info.schedule.name}\n                </Menu.Item>\n\n                <Menu.Item \n                value=\"trainers\"\n                as={Link} to={info.trainers.to}\n                onClick = {handleClick}\n                active={props.activeItem === 'trainers'}\n                >\n                {info.trainers.name}\n                </Menu.Item>\n\n                <Menu.Item\n                value=\"clients\"\n                as={Link} to={info.clients.to}\n                onClick = {handleClick}\n                active={props.activeItem === 'clients'}\n                >\n                {info.clients.name}\n                </Menu.Item>\n\n                <Menu.Item\n                value=\"packages\"\n                as={Link} to={info.packages.to}\n                onClick = {handleClick}\n                active={props.activeItem === 'packages'}\n                >\n                {info.packages.name}\n                </Menu.Item>\n\n                {/* <Menu.Item\n                value=\"settings\"\n                as={Link} to={`/settings`}\n                onClick = {handleClick}\n                active={props.activeItem === 'settings'}\n                >\n                Settings\n                </Menu.Item> */}\n            \n            </Menu>\n        </div>\n    )\n        \n}\n\nconst msp = (state) => {\n    return {\n        activeItem: state.app.activePage,\n        type: state.user.user.type\n    }\n\n}\n\n\nexport default connect(msp, { setActivePage })(SideBar);\n","\nexport const getFullName = (person) => {\n    return `${person.first_name} ${person.last_name}`\n}\n\nexport const getShortName = (person) => {\n    return `${person.first_name} ${person.last_name[0].toUpperCase()}.`\n}\n\nexport const getDayString = (date) =>{\n    return `${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}`\n}\n\nexport const getUserFromId = (id, all) => {\n    return all.find(t => t.id === id)\n}\n\n\nexport const getTimeString = (date) =>{\n    let hrs = date.getHours() + \"\"\n\n    if (hrs.length === 1) hrs = \"0\".concat(hrs)\n    let mins = date.getMinutes() + \"\"\n    if (mins.length === 1) mins = mins.concat(\"0\")\n\n    return `${hrs}:${mins}`\n}\n\nexport const getSessionsSold = (packages) =>{\n    if(packages.length < 1 ) return 0\n    let sessions = packages.map( pack => pack.session_count)\n    return sessions.reduce((sum, count) => sum+count)\n}\n\nexport const getSessionCount = (backDate, user) =>{\n    return user.sessions.filter(session => new Date(backDate) <= new Date(session.daytime)).length\n}\n\nexport const getTopPerformer = (users, backDate ) => {\n\n    let user = users.reduce( (max, current) => getSessionCount(backDate, max) > getSessionCount(backDate, current) ? max : current)\n\n    return {\n        user: user,\n        sessions: getSessionCount(backDate, user)\n    }\n}\n\nexport const isNewClient = (client, backDate ) => {\n    return client.sessions.find(session => new Date(session.daytime) < new Date(backDate)) === undefined\n}\n\nexport const capitalize = (string) => {\n    return string[0].toUpperCase() + string.slice(1)\n} \n\nexport const getTimes = () => {\n    let year = new Date()\n    year.setFullYear(year.getFullYear() -1)\n\n    let month = new Date()\n    month.setMonth(month.getMonth()-1)\n\n    let week = new Date()\n    week.setDate(week.getDate() - week.getDay())\n    \n    return {\n        year: year,\n        month: month,\n        week: week\n    }\n}\n\nexport const overlap = (start1, len1, start2, len2) => {\n    start1 = new Date(start1)\n \n    let end1 = new Date(start1)\n    end1.setMinutes(end1.getMinutes() + len1)\n    let end2 = new Date(start2)\n    end2.setMinutes(end2.getMinutes() + len2)\n    \n    return (start1 >= start2 && start1 < end2) || (end1 > start2 && end1 <= end2)\n}\n\nexport const isAvailable = (user, sessions, daytime, length, thisSession) => {\n\n    let potentialConflicts = sessions.filter(ses => {\n        return ((ses.client_id === user.id || ses.trainer_id === user.id) && ses.status !== \"cancelled\") \n    })\n \n    let conflict = potentialConflicts.find(ses => ses.id !== thisSession && overlap(ses.daytime, ses.length, daytime, length) )\n\n    return (conflict === undefined)\n}\n\nexport const findClientByName = (name, clients) => {\n\n    let first = name.split(\" \")[0]\n    let last = name.split(\" \")[1]\n  \n    let client = clients.find(client => client.first_name === first && client.last_name === last)\n    return client\n}\n\nexport const getAge = (person) => {\n    let today = new Date(Date.now())\n    let then = new Date(person.dob)\n    let years\n    if(today.getMonth() === then.getMonth()){\n        years = today.getDay() >= then.getDate() ? 0 : -1\n\n    }else if(today.getMonth() > then.getMonth()){\n        years = 0\n\n    }else{\n        years = 1\n\n    }\n\n    years += (today.getFullYear() - then.getFullYear())\n    return Math.max(0, years)\n}\n\n\nexport const getLevelOptions = (levels) => {\n\n    return levels.map(level => {\n        return {\n            key: level.id,\n            value: level.id,\n            text: level.name\n        }\n    })\n}\n\nexport const getPackageOptions = (packages) => {\n\n    return packages.map(pack => {\n        return {\n            key: pack.id,\n            value: pack.id,\n            text: pack.title\n        }\n    })\n}\n\n\nexport const getClientPackageOptions = (client_id, all_cps) => {\n    let cps =  all_cps.filter(client_package => client_package.client.id === client_id)\n\n    cps = cps.filter(client_package => client_package.session_count > 0)\n    cps = cps.filter(client_package => new Date(client_package.expiration) >= new Date())\n\n    return cps.map(cp => {\n        return {\n            key: cp.id,\n            value: cp.id,\n            text: `${cp.package.title} (${cp.session_count} remaining)`\n        }\n    })\n      \n}","import React from 'react';\nimport { Dimmer, Loader, Segment} from 'semantic-ui-react';\n\n\nconst Loading = props => {\n\n  const renderDimmer = (flag) =>{\n    if(flag){\n      return <Dimmer className={\"myloader\"} active page>\n              <Loader>Loading</Loader>\n          </Dimmer>\n    }else if(props.nonsegment){\n      return <Dimmer className={\"myloader\"} active >\n              <Loader>Loading</Loader>\n          </Dimmer>\n    }else{\n      return <Segment>\n          <Dimmer className={\"myloader\"} active >\n              <Loader>Loading</Loader>\n          </Dimmer>\n        </Segment>\n    }\n    \n  }\n  \n  return (\n    // <div className=\"loading\">\n  \n    renderDimmer(props.full === true)\n    \n    \n    // </div>\n  );\n};\n\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport { Card, Feed, Statistic, Divider, Grid } from 'semantic-ui-react';\nimport { connect } from 'react-redux'\n\nimport { getTopPerformer, isNewClient, getTimes, getFullName, getSessionsSold} from '../../helpers/generalHelpers'\n\nimport Loading from '../../components/Loading'\n\nclass ManagerDash extends Component {\n\n  state = {\n      times: getTimes()\n  }\n  \n  getSessionStats = (backDate) => {\n   \n    return {\n        topTrainer: getTopPerformer(this.props.allTrainers, backDate),\n        sessions: this.props.allSessions.filter(session => new Date(session.daytime) >= new Date(backDate) && session.status === \"complete\"),\n        topClient: getTopPerformer(this.props.allClients, backDate),\n        newClients: this.props.allClients.filter(client => isNewClient(client, backDate)),\n        sessionsSold: getSessionsSold(this.props.clientPackages.filter(cp => new Date(cp.created_at) >= new Date(backDate)))\n    }\n\n}\n\nrenderStats = (backDate, time) => {\n    let stats\n    if(!this.props.allLoading) stats = this.getSessionStats(backDate)\n    return (\n         <Grid.Column key={time}>\n            <Card className={\"dash-card\"}>\n                <Card.Content>\n                <Card.Header>This {`${time}`}</Card.Header>\n                </Card.Content>\n                <Card.Content>\n                { this.props.allLoading ? \n                    <Loading inverted={true} nonsegment={true}/>\n                :\n                    <Feed>\n                        <Feed.Event>\n                            <Feed.Content>\n                            <Feed.Summary>\n                                <Statistic.Group horizontal size='tiny'>\n                                    <Statistic size='tiny'>\n                                        <Statistic.Value>{stats.sessions.length}</Statistic.Value>\n                                        <Statistic.Label>Total Sessions</Statistic.Label>\n                                    </Statistic>\n                                    <Statistic size='tiny'>\n                                        <Statistic.Value>{stats.newClients.length}</Statistic.Value>\n                                        <Statistic.Label>New Clients</Statistic.Label>\n                                    </Statistic>\n                                    <Statistic size='tiny'>\n                                        <Statistic.Value>{stats.sessionsSold}</Statistic.Value>\n                                        <Statistic.Label>Sessions Sold</Statistic.Label>\n                                    </Statistic>\n                                </Statistic.Group>\n                            </Feed.Summary>\n                            </Feed.Content>\n                        </Feed.Event>\n                        <Divider/>\n                        <Feed.Event>\n                        <Feed.Content>\n                            <Feed.Summary>\n                                <b>Top Trainer</b>: <a href={`/profile/${stats.topTrainer.user.id}`}>{getFullName(stats.topTrainer.user)}</a>\n                            </Feed.Summary>\n                            <Feed.Extra>{stats.topTrainer.sessions} sessions</Feed.Extra>\n                        </Feed.Content>\n                        </Feed.Event>\n                        <Divider/>\n                        <Feed.Event>\n                        <Feed.Content>\n                        <Feed.Summary>\n                                <b>Top Client</b>: <a href={`/profile/${stats.topClient.user.id}`}>{getFullName(stats.topClient.user)}</a>\n                            </Feed.Summary>\n                            <Feed.Extra>{stats.topClient.sessions} sessions</Feed.Extra>\n                        </Feed.Content>\n                        </Feed.Event>\n                    </Feed> \n                }\n                </Card.Content>\n            </Card> \n        </Grid.Column> \n        \n    )\n}\n\nrenderTimes = () => {\n    return Object.keys(this.state.times).map( key => this.renderStats(this.state.times[key], key))\n           \n}\n   \n\n  render(){\n    return ( \n        <Grid columns={3}>\n            <Grid.Row>\n                {this.renderTimes()}\n            </Grid.Row>\n        </Grid>\n    )\n  }\n}\n\nconst msp = (state) => {\n  return {\n    allTrainers: state.user.allTrainers,\n    allSessions: state.schedule.allSessions,\n    allClients: state.user.allClients,\n    clientPackages: state.app.clientPackages,\n    allLoading: state.app.allLoading\n  }\n}\n\nexport default connect(msp)(ManagerDash);","import React from 'react';\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\n\nimport ManagerDash from '../containers/navigation/ManagerDash'\n\nconst Landing = (props) => {\n\n  const renderDash = () => {\n    switch(props.user.type){\n      case \"Manager\":\n        return <ManagerDash/>\n      default:\n        return <Redirect to='/schedule'/>\n    }\n  }\n\n\n    return (\n      <div>\n        {renderDash()}\n      </div>\n    )\n}\n\nconst msp = (state) => {\n  return {\n    user: state.user.user\n  }\n}\n\nexport default connect(msp)(Landing);","import {getFullName} from './generalHelpers'\nimport React from 'react'\n\n\nexport const getResources = (trainers, trainer) =>{\n    if(trainer.id){\n        return [{\n            id: trainer.id,\n            title: getFullName(trainer)\n        }]\n    }else{\n        return trainers.map(train => {\n            return {\n                id: train.id, \n                title: getFullName(train)\n            }\n        })\n    }\n}\n\nexport const getEvents = (sessions, clients, trainer) =>{\n    if(trainer.id){\n        sessions = sessions.filter(session => session.trainer_id === trainer.id)\n    }\n    let liveSessions = sessions.filter(ses => ses.status !== \"cancelled\")\n    return liveSessions.map(session => {\n        let end = new Date(session.daytime)\n        end.setMinutes(end.getMinutes() + session.length)\n        let client = clients.find(client => client.id === session.client_id)\n        return {\n            id: session.id,\n            title: getFullName(client),\n            start: new Date(session.daytime),\n            end: end,\n            resourceId: session.trainer_id\n        }\n    })\n}\n\n\nexport const getTrainerOptions = (allTrainers) => {\n    return allTrainers.map(trainer => {\n        return {\n            key: trainer.id,\n            value: trainer.id,\n            text: getFullName(trainer)\n        }\n    })\n}\n\nexport const getClientOptions = (allClients) => {\n    return  allClients.map(client => {\n        return {\n            key: client.id,\n            value: client.id,\n            text: getFullName(client)\n        }\n    })\n}\n\nexport const customEventPropGetter = event => {\n    if (event.unpaid)\n      return {\n        className: 'unpaid',\n        style: {\n        border: 'solid 3px #faa'\n      },\n      }\n    else return {}\n  }\n\nexport function Event({ event }) {\n    return (\n      <span>\n        <strong>{event.title}</strong>\n        {event.desc && ':  ' + event.desc}\n      </span>\n    )\n}","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom'\nimport { Search} from 'semantic-ui-react';\nimport _ from 'lodash'\n\nimport { getFullName } from \"./generalHelpers\"\n\n\nclass ClientSearch extends Component {\n\n    state = {\n        isLoading: false,\n        searchResults: [],\n        searchValue: \"\"\n    }\n\n    componentDidMount(){\n\n        if(this.props.client_id > 0){\n            let client = this.props.clients.find(client => client.id === this.props.client_id)\n            this.props.setClient(client.id)\n            this.setState({\n                searchValue: getFullName(client)\n            })\n        }\n    }\n\n    handleClientSearchSelect = (e, { result }) => {\n        this.props.setClient(result.id)\n        this.setState({\n            searchValue: result.title\n        })\n    }\n\n    // THIS FUNCTION DIRECTLY FROM SEMANTIC DOCS \n    // https://react.semantic-ui.com/modules/search/#types-standard\n    handleClientSearchChange = (e, { value }) => {\n        const clientsWithTitle = this.props.clients.map(client => {\n            return {\n                ...client,\n                title: getFullName(client)\n            }\n        })\n            \n        this.setState({ \n            isLoading: true, \n            searchValue: value \n        })\n\n        setTimeout( () => {\n            //If there isn't anything searched for, reset\n            if (this.state.searchValue.length < 1) {\n       \n                this.setState({\n                    isLoading: false,\n                    searchResults: [],\n                    searchValue: \"\"\n                })\n\n            }else {\n        \n                // otherwise, create regeX and define isMatch function to do comparison\n                const re = new RegExp(_.escapeRegExp(this.state.searchValue), 'i')\n                const isMatch = (result) => re.test(getFullName(result))\n\n                this.setState({\n                    isLoading: false, \n                    searchResults: _.filter(clientsWithTitle, isMatch),\n                })\n            }\n\n        }, 300)\n\n    }\n\n    render(){\n\n        const {isLoading, searchResults, searchValue} = this.state\n        return (\n            <Search className=\"client-search\"\n                placeholder='Search Client Name'\n                loading={isLoading}\n                onResultSelect={this.handleClientSearchSelect}\n                onSearchChange={_.debounce(this.handleClientSearchChange, 500, {\n                leading: true,\n                })}\n                results={searchResults}\n                value={searchValue}\n                //{...this.props}\n            />\n        )\n    }\n\n}\n\n\n\nexport default withRouter(ClientSearch)\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport { Form, Button, Header, Label, Segment} from 'semantic-ui-react';\n\nimport {sellPackage} from '../../actions/actions'\nimport ClientSearch from '../../helpers/ClientSearch'\nimport {getPackageOptions} from '../../helpers/generalHelpers'\n\nimport {API} from '../../App'\n\nclass BuySellPackageForm extends Component {\n\n    state = {\n        package_id: this.props.package.id,\n        client_id: this.props.client.id,\n        errors: []\n    }\n\n    handleChange = (e, {value, name}) => {\n        if(e.target.value){\n            value = e.target.value\n            name = e.target.name\n        }\n\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleSubmit = (e) =>{\n\n        e.preventDefault()\n\n        let pack = this.props.packages.find(pack => pack.id === this.state.package_id)\n        let exp = new Date() \n        exp.setDate(exp.getDate() + pack.exp_weeks * 7)\n\n        let soldPackage = {\n            client_package: {\n                client_id: this.state.client_id,\n                package_id: this.state.package_id,\n                session_count: pack.session_count,\n                expiration: exp\n            }\n        }\n        \n        if(false){\n            this.setState({\n                errors: [ \"Problemo\"]\n            })\n        }else{\n        \n            fetch(`${API}/client_packages`, {\n                method: \"POST\",\n                headers: {\n                    \"content-type\": \"application/json\",\n                    \"accepts\": \"application/json\"\n                },\n                body: JSON.stringify(soldPackage)\n\n            }).then (resp => resp.json())\n                .then(data => {\n    \n                    if(data.errors){\n                        this.setState({\n                            errors: data.errors,\n                        })\n                    }else{\n                        this.props.sellPackage(data.client_package)\n                        this.props.toggleForm()\n                    }\n                })\n        }\n             \n    }\n\n    renderErrors = () => {\n        return this.state.errors.map((error, i) => <li key={i}>{error}</li>)\n    }\n\n    render(){\n        console.log('rendering buy/sell package form...state = ', this.state)\n       \n        return (\n            <div className= 'outer-popup'>\n            <div className=\"inner-popup\">\n                <Header as={'h1'}>{this.props.selling ? \"Sell\" : \"Buy\"} Package</Header>\n                <Form className='sell-package-form' id=\"sell-package-form\" value={this.state.id} onSubmit={this.handleSubmit}>\n                    <Form.Group>\n                        <Segment>\n                            <Label attached=\"top\">Client</Label>\n                            <ClientSearch client_id={this.state.client_id} clients={this.props.allClients} setClient={(id) => this.setState({client_id: id})}/>\n\n                        </Segment>\n                    </Form.Group>\n                    <Form.Group>  \n                        <Segment>\n                            <Label attached=\"top\">Package</Label> \n                            <Form.Select\n                                onChange={this.handleChange}\n                                value={this.state.package_id}\n                                name=\"package_id\"\n                                options={getPackageOptions(this.props.packages)}\n                                placeholder='Select Package'\n                            />\n                        </Segment>\n                    </Form.Group>\n                </Form>\n                    <p>\n                        <Button primary type=\"submit\" form={\"sell-package-form\"}>{this.props.selling ? \"Sell Package\" : \"Buy Package\"}</Button>\n                        <Button onClick={this.props.goBack}>Go Back</Button>\n                    </p>\n                    {this.state.errors.length > 0 ? <ul>{this.renderErrors()}</ul> : null}\n            </div>\n            </div>\n        )\n    }\n}\n\n\nexport default connect(undefined, { sellPackage })(withRouter(BuySellPackageForm))\n\n\n\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport { Form, Button, Radio, Segment, Label, Header} from 'semantic-ui-react';\n\nimport ClientSearch from '../../helpers/ClientSearch'\nimport { isAvailable, getClientPackageOptions, getFullName, capitalize} from \"../../helpers/generalHelpers\"\nimport {addSession, updateSession, cancelSession, decreaseSessionCount} from '../../actions/actions'\nimport {API} from '../../App'\nimport BuySellPackageForm from '../packages/BuySellPackageForm';\n\nclass SessionForm extends Component {\n\n    state = {\n        id: this.props.editSession.id,\n        date: this.props.editSession.date,\n        time: this.props.editSession.time,\n        length: this.props.editSession.length,\n        trainer_id: this.props.editSession.trainer_id,\n        client_id: this.props.editSession.client_id,\n        client_package_id: this.props.editSession.client_package_id,\n        status: this.props.editSession.status,\n        showPackForm: false,\n        errors: []\n    }\n\n\n    handleChange = (e, {value, name}) => {\n        if(e.target.value){\n            value = e.target.value\n            name = e.target.name\n        }\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleSubmit = (e) =>{\n\n        e.preventDefault()\n    \n        const {isNew} = this.props\n        let date = this.state.date.split(\"-\")\n        let time = this.state.time.split(\":\")\n        let dayAndTime = new Date(date[0], date[1] - 1, date[2], time[0], time[1])\n        \n        let newSession = {\n            session: {\n                daytime: dayAndTime,\n                trainer_id: this.state.trainer_id,\n                client_id: this.state.client_id,\n                client_package_id: this.state.client_package_id,\n                status: \"scheduled\",\n                length: parseInt(this.state.length)\n            }\n        }\n        \n        if(!this.state.client_id || !this.state.trainer_id){\n            this.setState({\n                errors: [\"Must select client and trainer!\"]\n            })\n        }else if (isNew && !this.state.client_package_id){\n            this.setState({\n                errors: [\"Must select package to deduct\"]\n            })\n        } else{\n            \n            let client = this.props.allClients.find(client => client.id === this.state.client_id)\n            let trainer = this.props.allTrainers.find(trainer => trainer.id === this.state.trainer_id)\n           \n            if(!isAvailable(client, this.props.allSessions, newSession.session.daytime, newSession.session.length, this.state.id)){\n                this.setState({\n                    errors: [\"The client already has a session at this time. Try another time\"]\n                })\n            }else if(!isAvailable(trainer, this.props.allSessions, newSession.session.daytime, newSession.session.length, this.state.id)){\n                this.setState({\n                    errors: [\"The trainer has another session at this time. Try another time or trainer\"]\n                })\n\n            }else{\n\n                let url = isNew ? \"\" : `/${this.state.id}`\n                let method = isNew ? \"POST\" : \"PATCH\"\n                \n                fetch(`${API}/sessions${url}`, {\n                    method: method,\n                    headers: {\n                        \"content-type\": \"application/json\",\n                        \"accepts\": \"application/json\"\n                    },\n                    body: JSON.stringify(newSession)\n    \n                }).then (resp => resp.json())\n                    .then(data => {\n        \n                        if(data.errors){\n                            this.setState({\n                                errors: data.errors,\n                            })\n                        }else{\n\n                            // Add / Update the session in redux\n                            if(isNew){\n                                this.props.addSession(data.session)\n                                // Update the number of sessions left on client's package\n                                let cp = this.props.clientPackages.find(cp => cp.id === this.state.client_package_id)\n                                let obj = {\n                                    session_count: cp.session_count - 1\n                                }\n                                \n                                fetch(`${API}/client_packages/${this.state.client_package_id}`, {\n                                    method: \"PATCH\",\n                                    headers: {\n                                        \"content-type\": \"application/json\",\n                                        \"accepts\": \"application/json\"\n                                    },\n                                    body: JSON.stringify(obj)\n                    \n                                }).then (resp => resp.json())\n                                    .then(data => {\n                                        if(data.errors){\n                                            this.setState({\n                                                errors: data.errors,\n                                            })\n                                        }else{\n                                            this.props.toggleForm()\n                                            this.props.decreaseSessionCount(this.state.client_package_id)\n                                        }\n                                    })\n                            }else{\n                                this.props.updateSession(data.session)\n                                this.props.toggleForm()\n                            }\n\n                        }\n                    })\n            } \n        }       \n    }\n\n    handleStatus = (e, status) =>{\n\n        if(status === \"cancelled\"){\n            //eslint-disable-next-line\n            if(window.confirm(\"Are you sure you want to cancel this session?\") === false) return \n        }\n        \n        let obj = {\n            status: status\n        }\n\n        fetch(`${API}/sessions/${this.state.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"content-type\": \"application/json\",\n                \"accepts\": \"application/json\"\n            },\n            body: JSON.stringify(obj)\n\n        })\n        .then (resp => resp.json())\n        .then(data => {\n   \n            if(data.errors){\n                this.setState({\n                    errors: data.errors,\n                })\n            }else{\n                this.props.toggleForm()\n                this.props.updateSession(data.session)\n            }\n        })\n\n    }\n\n    renderErrors = () => {\n        return this.state.errors.map((error, i) => <li key={i}>{error}</li>)\n    }\n\n    toggleForm = (e) => {\n        if(e) e.preventDefault()\n        this.setState({\n            showPackForm: !this.state.showPackForm\n        })\n    }\n\n    renderPackageForm = () => {\n        return (<BuySellPackageForm \n            selling={true} \n            package={{}} \n            packages={this.props.packages} \n            toggleForm={this.toggleForm} \n            goBack={this.toggleForm} \n            client={this.props.allClients.find(client => client.id === this.state.client_id)} \n            allClients={this.props.allClients}\n            />)\n    }\n\n    renderPackageChoices = () => {\n        let packOptions = getClientPackageOptions(this.state.client_id, this.props.clientPackages)\n        if(packOptions.length < 1 && this.props.isNew){\n            return <Fragment>\n                    <Button size=\"mini\" secondary onClick={this.toggleForm}>Buy Sessions</Button>\n                </Fragment>\n        }\n        return (<Form.Select\n                    onChange={this.handleChange}\n                    value={this.state.client_package_id}\n                    name=\"client_package_id\"\n                    options={packOptions}\n                    placeholder='Select Package'\n                />)\n    }\n\n    render(){\n        console.log(\"state =\", this.state)\n        let {isNew} = this.props\n        return (\n            this.state.showPackForm ? this.renderPackageForm()\n            :\n            <div className= 'outer-popup'>\n                <div className=\"inner-popup\">\n                    <Header as=\"h1\"> {isNew ? \"Create\" : \"Edit\"} Session</Header>\n                    <Form className='session-form' id=\"session-form\" value={this.state.id} onSubmit={this.handleSubmit}>\n                        <Form.Group>\n                            <Segment className=\"client-trainer-select\" >\n                                <b>Status: { isNew? <span className=\"new-session\">New</span> : <span className={`${this.state.status}-session`}>{capitalize(this.state.status)}</span>}</b>\n                            </Segment>\n                        </Form.Group>\n                        <Form.Group widths=\"equal\">\n                            {isNew ? \n                                <Segment className=\"client-trainer-select\" >\n                                    <Label attached=\"top\">Trainer</Label>\n                                    <Form.Select\n                                        onChange={this.handleChange}\n                                        value={this.state.trainer_id}\n                                        name=\"trainer_id\"\n                                        options={this.props.trainerOptions}\n                                        placeholder='Select Trainer'\n                                    />\n                                </Segment>\n                            :\n                                <Segment className=\"client-trainer-select\" >\n                                    <b>Trainer: </b>{getFullName(this.props.allTrainers.find(t => t.id === this.state.trainer_id))}\n                                </Segment>\n                            }\n                        </Form.Group>\n                        <Form.Group>\n                            { isNew ? \n                                 <Segment className=\"client-trainer-select\" >\n                                    <Label attached=\"top\">Client</Label>\n                                    <ClientSearch client_id={this.state.client_id} clients={this.props.allClients} setClient={(id) => this.setState({client_id: id})}/>\n                                    {this.state.client_id !== undefined ? \n                                     this.renderPackageChoices()\n                                    : null}\n                                </Segment>\n                            :\n                                <Segment className=\"client-trainer-select\">\n                                    <b>Client: </b>{getFullName(this.props.allClients.find(c => c.id === this.state.client_id))}\n                                </Segment>\n                            }\n                            \n                        </Form.Group> \n                        \n                        <Form.Group inline>\n                            <Label horizontal>Date</Label>\n                            <Form.Input onChange={this.handleChange} value={new Date(this.state.date).toISOString().split(\"T\")[0]} name=\"date\" type=\"date\"/>\n                \n                            <Label>Time</Label>\n                            <Form.Input onChange={this.handleChange} value={this.state.time} name=\"time\" type=\"time\"/>\n                        </Form.Group>\n                        <Form.Group > \n                            <Label>Length</Label>\n                            <Form.Field>\n                                <Radio\n                                    label='30 min'\n                                    name='length'\n                                    value=\"30\"\n                                    checked={this.state.length === '30'}\n                                    onChange={this.handleChange}\n                                />\n                            </Form.Field>\n                            <Form.Field>\n                                <Radio\n                                    label='60 min'\n                                    name='length'\n                                    value=\"60\"\n                                    checked={this.state.length === '60'}\n                                    onChange={this.handleChange}\n                                />\n                            </Form.Field>\n                            <Form.Field>\n                                <Radio\n                                    label='90 min'\n                                    name='length'\n                                    value=\"90\"\n                                    checked={this.state.length === '90'}\n                                    onChange={this.handleChange}\n                                />\n                            </Form.Field>\n                        </Form.Group>                     \n                    </Form>\n                    <p>\n                        { this.props.isNew ? null : <Button onClick={(e) => this.handleStatus(e, \"cancelled\")}>Cancel Session</Button>}\n                        { this.props.isNew ? null : <Button onClick={(e) => this.handleStatus(e, \"no-show\")}>Mark No-Show</Button>}\n                        { this.props.isNew ? null : <Button onClick={(e) => this.handleStatus(e, \"complete\")}>Mark Completed</Button>}\n                    </p>\n                    <p>    \n                        <Button primary type=\"submit\" form={\"session-form\"}>{this.props.isNew ? \"Book Session\" : \"Save Changes\"}</Button>\n                        <Button onClick={this.props.goBack}>Go Back</Button>\n                    </p>\n\n                    {this.state.errors.length > 0 ? <ul>{this.renderErrors()}</ul> : null}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst msp = (state) => {\n    return {\n        allClients: state.user.allClients,\n        allSessions: state.schedule.allSessions,\n        allTrainers: state.user.allTrainers,\n        clientPackages: state.app.clientPackages,\n        packages: state.app.packages\n    }\n}\n\nexport default connect(msp, { addSession, updateSession, cancelSession, decreaseSessionCount })(withRouter(SessionForm))\n\n\n\n","import React, { Component} from 'react';\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport moment from 'moment'\nimport { Calendar, momentLocalizer, Views } from 'react-big-calendar'\nimport { Dropdown, Icon, Menu, Grid} from 'semantic-ui-react'\n\nimport {getTrainerOptions, getClientOptions, getEvents, getResources} from '../../helpers/scheduleHelpers'\nimport {getDayString, getTimeString, findClientByName} from '../../helpers/generalHelpers'\n\nimport SessionForm from './SessionForm';\nimport Loading from '../../components/Loading'\n\nconst localizer = momentLocalizer(moment)\nconst defaultSession = {\n    date: new Date(Date.now()).toISOString().split(\"T\")[0],\n    time: \"08:00\",\n    length: \"60\",\n    trainer_id: undefined,\n    client_id: undefined,\n    status: \"scheduled\"\n}\n\nclass ScheduleContainer extends Component {\n\n    state = {\n        views: { day: true},\n        userType: \"Manager\",\n        trainer: {},\n        client: {},\n        showForm: false,\n        editSession: {...defaultSession},\n        enterNew: true\n    }\n  \n\n\n    // update arrays of data in state anytime something changes\n    // (i.e. a drop-down, view change, etc.)\n    setData = () => {\n        const {user} = this.props\n        switch(user.type){\n            case \"Trainer\":\n                this.setState({\n                    userType: \"Trainer\",\n                    trainer: user,\n                    views: {day: true, week: true},\n                    sessions: this.props.allSessions.filter(ses => ses.trainer_id === user.id)\n                })\n                break;\n            case \"Client\":\n                this.setState({\n                    userType: \"Client\",\n                    views: {day: true, week: true},\n                    client: user,\n                    trainers: this.props.allTrainers.filter(train => train.clients.includes(user.id)),\n                    sessions: this.props.allSessions.filter(ses => ses.trainer_id === user.id)\n                })\n                break;\n            default:\n                break;\n        }\n    }\n\n    componentDidMount(){\n        this.setData()\n    }\n\n\n    // FORM ACTIONS ----------------------------------\n    toggleForm = (e) => {\n        this.setState({\n            showForm: !this.state.showForm,\n            errors: []\n        })\n    }\n\n    goBack = () => {\n        this.setState({\n            showForm: false,\n            editSession: {...defaultSession},\n            errors: [],\n            enterNew: true\n        })\n    }\n\n    // Calendar handlers ---------------------------------\n    handleSlotSelect = (e) => {\n\n        let newSession = {\n            date: getDayString(e.start),\n            time: getTimeString(e.start),\n            length: \"60\",\n            trainer_id: e.resourceId,\n            status: \"new\",\n            client_id: undefined,\n        }\n        \n        this.setState({\n            editSession: {...newSession},\n            showForm: true,\n            errors: [],\n            enterNew: true\n        })\n        \n\n    }\n    \n    handleEventSelect = (e) => {\n\n        let client = findClientByName(e.title, this.props.allClients)\n        let session = this.props.allSessions.find(s => s.id === e.id)\n\n        let newSession = {\n            id: e.id,\n            date: getDayString(e.start),\n            time: getTimeString(e.start),\n            length: \"60\",\n            trainer_id: e.resourceId,\n            status: session.status,\n            client_id: client.id\n        }\n      \n        this.setState({\n            enterNew: false,\n            editSession: newSession,\n            showForm: true,\n            errors: []\n        })\n    }\n  \n    handleTrainerSelect = (e, {value}) => {\n  \n        let train = {}\n        let trains = this.props.allTrainers\n        let views = { day: true}\n        if(value !== \"all\"){\n            train = this.props.allTrainers.find(trainer => trainer.id === value)\n            trains = this.props.allTrainers.filter(t => t.id === train.id)\n            views = { day: true, week: true}\n        }\n        this.setState({\n            trainer: train,\n            trainers: trains,\n            views: views\n        })\n    }\n\n    // RENDERS ---------------------------------\n    render(){\n    \n        const { allTrainers, allClients, allSessions} = this.props\n        const {trainer, views } = this.state\n\n       \n        return (\n            <div className=\"sched-container\">\n                {this.state.showForm ? <SessionForm editSession={this.state.editSession} trainerOptions={getTrainerOptions(allTrainers)} clientOptions={getClientOptions(allClients)} goBack={this.goBack} toggleForm={this.toggleForm} isNew={this.state.enterNew}/> \n                : null}\n                <Menu id=\"schedule-menu\" secondary>\n                    <Menu.Item size=\"small\" onClick={this.toggleForm}><Icon name = \"plus\"/> Add Session</Menu.Item>\n                    { this.state.userType === \"Manager\" ? \n                        <Menu.Menu position=\"right\">\n                        <Menu.Item>\n                            <Dropdown\n                                text=\"Filter By Trainer\"\n                                icon=\"filter\"\n                                selection\n                                onChange={this.handleTrainerSelect}\n                                options={this.props.allLoading? [] : [ {key: \"all\", text: \"Show All\", value: \"all\"}, ...getTrainerOptions(allTrainers)]}/>\n                        </Menu.Item>\n                        </Menu.Menu>\n                    : null }\n                </Menu> \n                {this.props.allLoading ? \n                <Grid><Grid.Row><Grid.Column><Loading/></Grid.Column></Grid.Row></Grid>\n                : \n                <Calendar className=\"calendar\"\n                    localizer= {localizer}\n                    views ={views}\n                    // popup= {true}\n                    selectable\n                    onSelectEvent = {this.handleEventSelect}\n                    onSelectSlot = {this.handleSlotSelect}\n                    defaultView= {Views.DAY}\n                    step= {15}\n                    scrollToTime= {new Date(moment())}\n                    min= {new Date(2017, 1, 1, 5, 0, 0)}\n                    max= {new Date(2050, 1, 1, 22, 0, 0)}\n                    events= {getEvents(allSessions, allClients, trainer)}\n                    resources= {getResources(allTrainers, trainer)}\n                    startAccessor=\"start\"\n                    endAccessor=\"end\"\n                    // eventPropGetter= {customEventPropGetter}\n                    // components ={{\n                    //     event: Event\n                    // }}\n                />\n                }\n\n            </div>\n        )\n        \n    }\n    \n}\n\nconst msp = (state) => {\n    return {\n        user: state.user.user,\n        allSessions: state.schedule.allSessions,\n        allClients: state.user.allClients,\n        allTrainers: state.user.allTrainers,\n        allLoading: state.app.allLoading\n    }\n}\nexport default connect(msp)(withRouter(ScheduleContainer));\n\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport { Form, Button, Header, Divider} from 'semantic-ui-react';\n\nimport {addUser, updateUser} from '../../actions/actions'\nimport {API} from '../../App'\n\nclass UserForm extends Component {\n\n    state = {\n        id: this.props.editUser.id,\n        first_name: this.props.editUser.first_name,\n        last_name: this.props.editUser.last_name,\n        gender: this.props.editUser.gender,\n        dob: this.props.editUser.dob,\n        email: this.props.editUser.email,\n        phone: this.props.editUser.phone,\n        level: this.props.userType === \"Trainer\" ? this.props.editUser.level.id : \"\",\n        errors: []\n    }\n\n    handleChange = (e, {value, name}) => {\n        if(e.target.name){\n            name = e.target.name\n        }\n        this.setState({\n            [name]: value\n        })\n    }\n\n\n    handleSubmit = (e) =>{\n        e.preventDefault()\n        let {isNew} = this.props\n\n        let newUser = {\n            user: {\n                first_name: this.state.first_name,\n                last_name: this.state.last_name,\n                dob: this.state.dob,\n                email: this.state.email,\n                phone: this.state.phone,\n                gender: this.state.gender\n            },\n            type: this.props.userType\n        }\n\n        if(this.props.userType === \"Trainer\") newUser.user.level_id = this.state.level\n        if(isNew) newUser.password = \"password\"\n\n        let base_url = this.props.userType === \"Trainer\" ? \"trainers\" : \"clients\"\n        let end_url = isNew ? \"\" : `/${this.state.id}`\n        let method = isNew ? \"POST\" : \"PATCH\"\n\n        fetch(`${API}/${base_url}${end_url}`, {\n            method: method,\n            headers: {\n                \"content-type\": \"application/json\",\n                \"accepts\": \"application/json\"\n            },\n            body: JSON.stringify(newUser)\n\n        }).then (resp => resp.json())\n            .then(data => {\n\n                if(data.errors){\n                    this.setState({\n                        errors: data.errors,\n                    })\n                }else{\n                    if(isNew){\n                        this.props.addUser(data.user, this.props.userType)\n                    }else{\n                        this.props.updateUser(data.user, this.props.userType)\n                    }\n                    this.props.toggleForm()\n                }\n            })\n    }\n   \n    renderErrors = () => {\n        return this.state.errors.map((error, i) => <li key={i}>{error}</li>)\n    }\n\n    \n    render(){\n        let {isNew, userType} = this.props\n        return (\n            <div className= 'outer-popup'>\n            <div className=\"inner-popup\">\n                <Form className=\"user-form\" id=\"user-form\" onSubmit={this.handleSubmit}>\n                    <Form.Group>\n                        <Header as=\"h1\"> {isNew ? \"Add\" : \"Edit\"} {userType === \"Trainer\" ? \"Trainer\" : \"Client\"}</Header>\n                    </Form.Group>\n                    <Divider />\n                    <Form.Group widths='equal'>\n                        <Form.Input onChange={this.handleChange} value={this.state.first_name} name=\"first_name\" label='First Name' placeholder='First name' />\n                        <Form.Input onChange={this.handleChange} value={this.state.last_name} name=\"last_name\" label='Last Name' placeholder='Last name' />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Input onChange={this.handleChange} value={new Date(this.state.dob).toISOString().split(\"T\")[0]} type=\"date\" name=\"dob\" label='Date of Birth' placeholder='DOB' />\n                        <Form.Select\n                                onChange={this.handleChange}\n                                value={this.state.gender}\n                                label='Gender'\n                                name= \"gender\"\n                                options={[{key: \"male\", value: \"Male\", text: \"Male\"}, {key: \"female\", value: \"Female\", text: \"Female\"}]}\n                                placeholder='Select Level'\n                            />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Input onChange={this.handleChange} type=\"email\" value={this.state.email} name=\"email\" label='Email' placeholder='Email' />\n                        <Form.Input onChange={this.handleChange} type=\"phone\" value={this.state.phone} name=\"phone\" label='Phone' placeholder='Phone' />\n                    </Form.Group>\n                    {this.props.userType === \"Trainer\" ?\n                        <Form.Group>\n                            <Form.Select\n                                onChange={this.handleChange}\n                                value={this.state.level}\n                                label='Choose Level'\n                                name= \"level\"\n                                options={this.props.levelOptions}\n                                placeholder='Select Level'\n                            />\n                        </Form.Group>\n                    : null}\n    \n                </Form>\n                \n                { !this.props.isNew ? <p><Button size=\"small\" value={this.state.id} onClick={this.props.deleteUser}>Delete User</Button> </p>: null}  \n                \n                <p>\n                    <Button primary type=\"submit\" form={\"user-form\"}>{this.props.isNew ? \"Submit\" : \"Save Changes\" }</Button>\n                    <Button onClick={this.props.goBack}>Go Back</Button>\n                </p>\n                {this.state.errors.length > 0 ? <ul>{this.renderErrors()}</ul> : null}\n            </div>\n            </div>\n        )\n    }\n    \n}\n\n\nexport default connect(undefined, {addUser, updateUser})(withRouter(UserForm))\n\n\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport {Button, Card, Menu, Input} from 'semantic-ui-react';\n\nimport {getFullName, getAge, getLevelOptions} from '../../helpers/generalHelpers'\nimport { deleteUser} from '../../actions/actions'\nimport UserForm from './UserForm'\nimport Loading from '../../components/Loading'\nimport {API} from '../../App'\n\nconst defaultUser = {\n    first_name: \"\",\n    last_name: \"\",\n    dob: new Date(),\n    email: \"\",\n    phone: \"\",\n    level: {\n        id: \"\"\n    },\n}\n\nclass UsersContainer extends Component {\n\n    state = {\n        showForm: this.props.showForm,\n        enterNew: this.props.enterNew,\n        editUser: this.props.editUser ? this.props.editUser : defaultUser,\n        errors: [],\n        path: this.props.userType.toLowerCase() + \"s\",\n        searchName: \"\"\n    }\n\n    deleteUser = (e) => {\n        //eslint-disable-next-line\n        if(!confirm(\"Are you sure you want to delete this user?\")) return \n        \n        let id = e.target.value\n        fetch(`${API}/${this.state.path}/${id}`, {\n            method: \"DELETE\",\n            headers: {\n                \"content-type\": \"application/json\",\n                \"accepts\": \"application/json\"\n            },\n        }).then (resp => resp.json())\n            .then(data => {\n                if(data.errors){\n                    this.setState({\n                        errors: data.errors.errors,\n                    });\n                }else{\n                    this.goBack(true)\n                    this.props.deleteUser(id, `${this.props.userType}`)\n                }\n            })\n    }\n\n    //Form Actions -------------------\n\n    viewProfile = (e) => {\n        this.props.history.push(`/profile/${e.target.value}`)\n    }\n\n    goBack = () => {\n        if(this.props.back){\n            this.props.history.goBack()\n        }else{\n            this.setState({\n                showForm: false,\n                enterNew: true,\n                editUser: defaultUser,\n                errors: []\n            })\n\n        }\n    }\n\n    toggleForm = (e) => {\n        let editUser = defaultUser\n        let enterNew = true\n        if(!!e && e.target.value ){\n            editUser = this.props.allUsers.find(u => u.id === parseInt(e.target.value))\n            enterNew = false\n        }\n        this.setState({\n            showForm: !this.state.showForm,\n            editUser: editUser,\n            enterNew: enterNew,\n            errors: []\n        })\n    }\n\n    // SEARCH actions ----------------------\n    handleSearchChange = (e) => {\n        this.setState({\n            searchName: e.target.value\n        })\n    }\n\n    // RENDERS ------------------------------\n\n    renderForm(){\n        if(this.state.enterNew){\n            return <UserForm isNew={true} editUser={this.state.editUser} toggleForm={this.toggleForm} levelOptions={getLevelOptions(this.props.levels)} goBack={this.goBack} userType={this.props.userType}/>\n        }else{\n            return <UserForm deleteUser={this.deleteUser} isNew={false} editUser={this.state.editUser} toggleForm={this.toggleForm} levelOptions={getLevelOptions(this.props.levels)} goBack={this.goBack} userType={this.props.userType}/>\n        }\n    }\n\n    renderAddButton(){\n        return (this.props.userType === \"Trainer\" ? \n            <p><Button onClick={this.toggleForm}>Add A Trainer</Button></p>\n            : <p><Button onClick={this.toggleForm}>Add A Client</Button></p>\n        )\n    }\n\n    renderUsers = () => {\n        const currentUser = this.props.user\n        const type = this.props.userType\n   \n        //sort the users alphabetically and filter if needed\n        let all = this.props.allUsers\n        all.sort((a, b) => a.last_name.localeCompare(b.last_name))\n\n        if(this.state.searchName !== \"\"){\n            let key = this.state.searchName.toLowerCase()\n            all = all.filter(user => getFullName(user).toLowerCase().includes(key))\n        }\n\n        // Display all users\n        if( !this.state.editForm && !this.state.addForm){\n            return all.map(user => {\n                return (\n                    <Card key={user.id}>\n                        <Card.Content>\n                            {/* <Image\n                            floated='right'\n                            size='mini'\n                            src='/images/avatar/large/steve.jpg'\n                            /> */}\n                            <Card.Header>{getFullName(user)}</Card.Header>\n                            { type === \"Trainer\" ? \n                                <Card.Meta>{user.level.name} Trainer</Card.Meta>\n                            :\n                                <Card.Meta>{user.gender}, {getAge(user)} years</Card.Meta>\n                            }\n                            <Card.Description>\n                                \n                            </Card.Description>\n                        </Card.Content>\n                        \n                            <Card.Content extra>\n                                <div>\n                                {currentUser.type === \"Manager\" ? \n                                    <Fragment>\n                                    <Button value={user.id} onClick={this.toggleForm}>Edit</Button> \n                                    </Fragment>\n                                : null }\n                                <Button value={user.id} onClick={this.viewProfile}>View Profile</Button>\n                                </div>\n                            </Card.Content>\n                    </Card>\n                )\n            })\n\n        }else{\n            return null\n        }\n    }\n\n    // RENDER --------------------------------\n    render(){\n\n        return (\n            \n            <div className=\"train-container\">\n                {this.state.showForm ?  this.renderForm() : null}\n                {this.renderAddButton()}\n                <Menu.Item>\n                    <Input icon='search' placeholder='Search by Name...'\n                        onChange={this.handleSearchChange} />\n                </Menu.Item>\n                <p></p>\n                {this.props.allLoading ? \n                <Loading/> \n                : \n                <Card.Group>\n                    {this.renderUsers()}\n                </Card.Group>\n                }\n            \n            \n            </div>\n        )\n        \n    }\n    \n}\n\nconst msp = (state) => {\n    return {\n        user: state.user.user,\n        allTrainers: state.user.allTrainers,\n        allClients: state.user.allClients,\n        levels: state.app.levels,\n        allLoading: state.app.allLoading\n    }\n}\nexport default connect(msp, {deleteUser})(withRouter(UsersContainer));\n\n\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux'\nimport { withRouter, Link } from 'react-router-dom'\nimport {Button, Grid, Image, Header, Segment, Label, List} from 'semantic-ui-react';\n\nimport {getFullName, getAge, getUserFromId} from '../../helpers/generalHelpers'\n\n// import {API} from '../../App' \n\nclass UserProfile extends Component {\n\n    state = {\n        path: this.props.user.type === \"Trainer\" ? \"trainers\" : \"clients\",\n        errors: []\n    }\n\n\n    renderUserList(users){\n        if(!users) return <li>No Trainers</li>\n        return users.map(id => {\n            return <List.Item key={id}><Link to={`/profile/${id}`}>{getFullName(getUserFromId(id, this.props.allUsers))}</Link></List.Item>\n        })\n    }\n\n    renderPackages(packages){\n        if(!packages) return <li>No Packages Yet!</li>\n        return packages.map(pack =>{\n            return <List.Item key={pack.id}>{pack.package.title} ({pack.session_count} / {pack.package.session_count} remaining) </List.Item>\n        })\n    }\n\n    renderClient = () => {\n        let {user} = this.props \n        return <Fragment>\n            <Grid.Row><Grid.Column>\n                <Segment>\n                    <Label attached=\"top\">Info</Label>\n                    <Header as=\"h3\">{user.gender}, {getAge(user)} years old</Header>\n                </Segment>\n            </Grid.Column></Grid.Row>\n            <Grid.Row><Grid.Column>\n                <Segment>\n                    <Label attached=\"top\">Trainers</Label>\n                    <List>{this.renderUserList(user.trainers)}</List>\n                </Segment>\n                </Grid.Column></Grid.Row>\n            <Grid.Row><Grid.Column>\n                <Segment>\n                    <Label attached=\"top\">Packages</Label>\n                    <List>{this.renderPackages(user.client_packages)}</List>\n                </Segment>\n            </Grid.Column></Grid.Row>\n        </Fragment>\n    }\n\n    renderTrainer = () => {\n        let {user} = this.props \n        return <Fragment>\n                <Grid.Row><Grid.Column>\n                    <Segment>\n                        <Label attached=\"top\">Info</Label>\n                        <Header as=\"h3\">{user.gender}, {user.level.name} trainer</Header>\n                    </Segment>\n                </Grid.Column></Grid.Row>\n                <Grid.Row><Grid.Column>\n                    <Segment>\n                        <Label attached=\"top\">Clients</Label>\n                        <List>{this.renderUserList(user.clients)}</List>\n                    </Segment>\n                    </Grid.Column></Grid.Row>\n                <Grid.Row><Grid.Column>\n                    \n                </Grid.Column></Grid.Row>\n            </Fragment>\n    }\n\n    showEdit = (e) => {\n        this.props.history.push(`/${this.state.path}/edit/${e.target.value}`)\n    }\n \n    render(){\n        let { user, currentUser} = this.props\n\n        return (\n            \n            <div className=\"user-profile\">\n                <Grid>\n                    <Grid.Row columns={2}>\n                        <Grid.Column width={2}><Image src='/img/profilepic.png' alt=\"Profile Pic\" size='large' /></Grid.Column>\n                        <Grid.Column width={8}><Header as=\"h1\">{getFullName(user)}</Header></Grid.Column>\n                    </Grid.Row>\n                    {user.type === \"Trainer\" ? this.renderTrainer() : this.renderClient()} \n                    <Grid.Row colums={1}>\n                        { currentUser.id === user.id || currentUser.type === \"Manager\" ? <Button value={user.id} onClick={this.showEdit}>Edit</Button> : null }\n                        <Button  onClick={() => this.props.history.goBack()}>Back</Button>\n                    </Grid.Row>\n                </Grid>\n            </div>\n        )\n    \n    }\n    \n}\n\nconst msp = (state) => {\n    return {\n        currentUser: state.user.user,\n        allUsers: [...state.user.allTrainers, ...state.user.allClients]\n    }\n}\nexport default connect(msp)(withRouter(UserProfile));\n\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport { Form, Button} from 'semantic-ui-react';\n\nimport {addPackage, updatePackage, deletePackage} from '../../actions/actions'\nimport { getLevelOptions } from '../../helpers/generalHelpers';\n\nimport {API} from '../../App'\n\nclass AddEditPackageForm extends Component {\n\n    state = {\n        id: -1,\n        title: \"\",\n        price: 0.0,\n        level_id: -1,\n        exp_weeks: 0,\n        session_count: 0,\n        errors: []\n    }\n\n    componentDidMount(){\n        if(!this.props.isNew){\n            let pack = this.props.editPack\n             this.setState({\n                 id: pack.id,\n                 title: pack.title,\n                 price: pack.price,\n                 level_id: pack.level.id,\n                 exp_weeks: pack.exp_weeks,\n                 session_count: pack.session_count,\n             })\n        }\n    }\n\n    handleChange = (e, {value, name}) => {\n        if(e.target.value){\n            value = e.target.value\n            name = e.target.name\n        }\n\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleSubmit = (e) =>{\n        e.preventDefault()\n    \n        const {isNew} = this.props\n\n        // clet level = this.props.levels.find(level => level.id === this.state.level_id)\n  \n        let newPackage = {\n            package: {\n                title: this.state.title,\n                price: this.state.price,\n                level_id: this.state.level_id,\n                exp_weeks: this.state.exp_weeks,\n                session_count: this.state.session_count,\n            }\n        }\n        \n        if(false){\n            this.setState({\n                errors: [ \"Problemo\"]\n            })\n        }else{\n           \n            let url = isNew ? \"\" : `/${this.state.id}`\n            let method = isNew ? \"POST\" : \"PATCH\"\n            \n            fetch(`${API}/packages${url}`, {\n                method: method,\n                headers: {\n                    \"content-type\": \"application/json\",\n                    \"accepts\": \"application/json\"\n                },\n                body: JSON.stringify(newPackage)\n\n            }).then (resp => resp.json())\n                .then(data => {\n    \n                    if(data.errors){\n                        this.setState({\n                            errors: data.errors,\n                        })\n                    }else{\n                        if(isNew){\n                            this.props.addPackage(data.package)\n                        }else{\n\n                            this.props.updatePackage(data.package)\n                        }\n                        this.props.toggleForm()\n                    }\n                })\n        }\n             \n    }\n\n    handleDelete = (e) =>{\n\n        fetch(`${API}/packages/${this.state.id}`, {\n            method: \"DELETE\",\n            headers: {\n                \"content-type\": \"application/json\",\n                \"accepts\": \"application/json\"\n            }\n        })\n        .then (resp => resp.json())\n        .then(data => {\n            if(data.errors){\n                this.setState({\n                    errors: data.errors,\n                })\n            }else{\n                this.props.toggleForm()\n                this.props.deletePackage(this.state.id)\n            }\n        })\n\n    }\n\n    renderErrors = () => {\n        return this.state.errors.map((error, i) => <li key={i}>{error}</li>)\n    }\n\n    render(){\n        \n       \n        return (\n            <div className= 'outer-popup'>\n            <div className=\"inner-popup\">\n                <Form className='package-form' id=\"package-form\" value={this.state.id} onSubmit={this.handleSubmit}>\n                    <Form.Group widths='equal'>\n                        <Form.Input onChange={this.handleChange} value={this.state.title} name=\"title\" label='Title' type=\"text\"/>\n                    </Form.Group>\n                    <Form.Group> \n                        <Form.Input onChange={this.handleChange} value={this.state.session_count} name=\"session_count\" label='Number of Sessions' type=\"number\"/>\n                        <Form.Input onChange={this.handleChange} value={this.state.exp_weeks} name=\"exp_weeks\" label='Expiration Weeks' type=\"number\"/>\n                    </Form.Group> \n                    <Form.Group>\n                        <Form.Input onChange={this.handleChange} value={this.state.price} name=\"price\" label='Price' type=\"number\"/>\n                        <Form.Select\n                            onChange={this.handleChange}\n                            value={this.state.level_id}\n                            name=\"level_id\"\n                            label='Level'\n                            options={getLevelOptions(this.props.levels)}\n                            placeholder='Select Level'\n                        />\n                    </Form.Group>\n                </Form>\n                    <p>\n                        <Button primary type=\"submit\" form={\"package-form\"}>{this.props.isNew ? \"Create Package\" : \"Save Changes\"}</Button>\n                        { this.props.isNew ? null : <Button onClick={this.handleDelete}>Delete Package</Button>}\n                        <Button onClick={this.props.goBack}>Go Back</Button>\n                    </p>\n                    {this.state.errors.length > 0 ? <ul>{this.renderErrors()}</ul> : null}\n            </div>\n            </div>\n        )\n    }\n}\n\n\nexport default connect(undefined, { addPackage, updatePackage, deletePackage })(withRouter(AddEditPackageForm))\n\n\n\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport {Grid, Header, Button, Divider, Icon, Menu} from 'semantic-ui-react';\n\nimport { deletePackage, updatePackage, addPackage} from \"../../actions/actions\"\nimport AddEditPackageForm from './AddEditPackageForm';\nimport BuySellPackageForm from './BuySellPackageForm';\n\nimport Loading from '../../components/Loading'\n\nclass PackagesContainer extends Component {\n\n    state = {\n        form: \"\",\n        showPopup: false,\n        editPack: {},\n        errors: []\n    }\n\n\n    goBack = () => {\n        this.setState({\n            form: \"\",\n            showPopup: false,\n            errors: []\n        })\n\n    }\n\n    toggleForm = (e) => {\n        this.setState({\n            showPopup: !this.state.showPopup,\n            errors: []\n        })\n    }\n\n\n    // HANDLERS -------------------------------\n\n    handleClick = (e, id) => {\n  \n        let name = e.target.name\n        let editPack = {}\n        if(id !== -1) editPack = this.props.packages.find(pack => pack.id === id)\n       \n        this.setState({\n            showPopup: true,\n            form: name,\n            editPack: editPack\n        })\n    }\n\n    // RENDERS ------------------------------\n    renderPopup = () => {\n        switch(this.state.form){\n            case \"edit\":\n                return <AddEditPackageForm isNew={false} editPack={this.state.editPack} toggleForm={this.toggleForm} goBack={this.goBack} levels={this.props.levels}/>\n            case \"add\":\n                return <AddEditPackageForm isNew={true} toggleForm={this.toggleForm} goBack={this.goBack} levels={this.props.levels}/>\n            case \"sell\":\n                return <BuySellPackageForm selling={true} package={this.state.editPack} packages={this.props.packages} toggleForm={this.toggleForm} goBack={this.goBack} client={{}} allClients={this.props.allClients}/>\n            case \"buy\":\n                return <BuySellPackageForm selling={false} package={this.state.editPack} packages={this.props.packages} toggleForm={this.toggleForm} goBack={this.goBack} client={this.props.user} allClients={[this.props.user]}/>\n                \n            default:\n                break\n        }\n    }\n    \n    renderAddButton = () =>{\n        return this.props.user.type === \"Manager\" ? <Button name=\"add\" onClick={(e) => this.handleClick(e, -1)}><Icon name=\"plus\"/>Add Package</Button> : null\n    }\n\n    // Render the level sections for the package list\n    renderLevelPackages = () => {\n        return this.props.levels.map(level => {\n            let packs = this.props.packages.filter(pack => pack.level.id === level.id)\n            packs.sort((a, b) => a.price - b.price)\n            return <Fragment>\n                    <Grid.Row key={level.id} columns={1}>\n                        <Grid.Column>\n                            <Header as=\"h3\"><Icon name=\"angle right\"/>{level.name} Packages:</Header>\n                        </Grid.Column>\n                    </Grid.Row>\n                    {this.renderPackages(packs)}\n                    <Divider/>\n                    </Fragment>\n\n        })\n    }\n\n    // Render the packages in the sub-heading \n    renderPackages = (packs) => {\n        let type = this.props.user.type\n        \n        let options = {\n            \"Manager\": {\n                package_button: \"Sell Package\",\n                name: \"sell\"\n            },\n            \"Trainer\": {\n                package_button: \"Sell Package\",\n                name: \"sell\"\n            },\n            \"Client\": {\n                package_button: \"Purchase Package\",\n                name: \"buy\"\n            }\n        }\n\n        return packs.map(pack => {\n            return <Grid.Row key={pack.id} columns={2}>\n                    <Grid.Column width={1}> </Grid.Column>\n                    <Grid.Column width={10}>\n                        <Header as='h3'\n                            content={pack.title}\n                            subheader={`${pack.session_count} ${pack.level.name} session${pack.session_count > 1 ? \"s\" : \"\" } | Price: $${pack.price}.00`}/>\n                        <span>\n                            {type === \"Manager\" ? <Button name=\"edit\" onClick={(e) => this.handleClick(e, pack.id)}>Edit Package</Button> : null}\n                            <Button name={options[type].name} onClick={(e) => this.handleClick(e, pack.id)}>{options[type].package_button}</Button>\n                        </span>\n                    </Grid.Column>\n                    </Grid.Row>\n        })\n    }\n\n    // MAIN RENDER --------------------------------\n    render(){\n\n        return (\n\n            <div className=\"packages-container\">\n                {this.state.showPopup ?  this.renderPopup() : null} \n                \n                <Menu secondary>\n                    <Menu.Item>\n                        <h1>All Packages</h1>\n                    </Menu.Item>\n                    <Menu.Item>\n                        {this.renderAddButton()}\n                    </Menu.Item>\n                </Menu>\n  \n                <Divider/>\n                <Grid>\n                {this.props.allLoading? \n                  <Grid.Row><Grid.Column><Loading/></Grid.Column></Grid.Row>\n                :  \n                    this.renderLevelPackages()\n                }\n                    \n                </Grid> \n            </div>\n        )\n        \n    }\n    \n}\n\nconst msp = (state) => {\n    return {\n        user: state.user.user,\n        packages: state.app.packages,\n        levels: state.app.levels,\n        allClients: state.user.allClients,\n        allLoading: state.app.allLoading\n    }\n}\nexport default connect(msp, {deletePackage, updatePackage, addPackage})(withRouter(PackagesContainer));\n\n\n","import React, { Component } from 'react';\nimport { Label, Grid, Segment, Form, Step, Icon} from 'semantic-ui-react';\nimport { connect } from 'react-redux'\n\nimport { updateUser } from '../../actions/actions'\nimport {API} from '../../App'\n// import { } from '../../helpers/generalHelpers'\n\nclass Settings extends Component {\n\n  state = {\n      id: this.props.user.id,\n      first_name: this.props.user.first_name,\n      last_name: this.props.user.last_name,\n      email: this.props.user.email,\n      phone: this.props.user.phone,\n      dob: this.props.user.dob,\n      gender: this.props.user.gender,\n      old_password: \"\",\n      new_password: \"\",\n      new_password_confirm: \"\",\n      errors: [],\n      success: false,\n      base_url: this.props.user.type === \"Manager\" ? \"users\" : this.props.user.type.toLowerCase() + 's'\n  }\n\n  handleErrors = () => {\n    return (\n        <ul>\n          {this.state.errors.map(error => {\n            return <li key={error}>{error}</li>;\n          })}\n        </ul>\n    );\n  };\n\n  handleChange = (e, {value, name}) => {\n    if(e.target.value){\n        value = e.target.value\n        name = e.target.name\n    }\n\n    this.setState({\n        [name]: value,\n        success: false\n    })\n}\n\nhandleResponse = (data) => {\n    if(data.errors){\n        this.setState({\n            errors: data.errors,\n            success: false\n        })\n    }else{\n\n        this.props.updateUser(data.user, this.props.user.type)\n        this.setState({\n            success: true\n        })\n    }\n}\n\n  updateAcct = (e) => {\n      e.preventDefault()\n\n      const { email, old_password } = this.state;\n\n        const user = {\n            email: email,\n            password: old_password,\n            type: this.props.user.type\n        };\n\n        //confirm old password\n        fetch(`${API}/login`, {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json',\n                accept: 'application/json',\n            },\n            body: JSON.stringify(user),\n        })\n        .then(res => res.json())\n        .then(data => {\n        \n            // If the user is valid, log them in...\n            if (data.data) {\n                \n                if(this.state.new_password === this.state.new_password_confirm){\n                    // patch with password\n                    let newUser = {\n                        user: {\n                            email: this.state.email,\n                        },\n                        password: this.state.new_password,\n                        password_confirmation: this.state.new_password_confirmation,\n                        type: this.props.userType\n                     }\n\n                    fetch(`${API}/${this.state.base_url}/${this.state.id}`, {\n                        method: \"PATCH\",\n                        headers: {\n                            \"content-type\": \"application/json\",\n                            \"accepts\": \"application/json\"\n                        },\n                        body: JSON.stringify(newUser)\n\n                    }).then (resp => resp.json())\n                    .then(data => {\n                        this.handleResponse(data)\n                    })\n\n                }else{\n                    this.setState({\n                        errors: [\"Password and Confirm don't match\"],\n                        success: false\n                    })\n                }\n\n            // If user is not valid / found, set user to null and record errors\n            } else {\n                this.setState({\n                    errors: [\"Incorrect old password\"],\n                    success: false\n                })\n            }\n        })\n  }\n\n  updateProfile = (e) => {\n    e.preventDefault()\n\n    let newUser = {\n        user: {\n            first_name: this.state.first_name,\n            last_name: this.state.last_name,\n            dob: this.state.dob,\n            phone: this.state.phone,\n            gender: this.state.gender\n            },\n        type: this.props.userType\n     }\n\n    if(this.props.user.type === \"Trainer\") newUser.user.level_id = this.state.level\n\n    fetch(`${API}/${this.state.base_url}/${this.state.id}`, {\n        method: \"PATCH\",\n        headers: {\n            \"content-type\": \"application/json\",\n            \"accepts\": \"application/json\"\n        },\n        body: JSON.stringify(newUser)\n\n    }).then (resp => resp.json())\n    .then(data => {\n        this.handleResponse(data)\n    })\n  }\n\n  render(){\n    return (\n      <Grid >\n          {this.state.errors.length > 0 ? <Grid.Row><Grid.Column>{this.handleErrors()}</Grid.Column></Grid.Row> : null}\n          {this.state.success ? \n          <Grid.Row><Grid.Column>\n              <Step.Group fluid><Step completed>\n                <Icon name='setting' />\n                <Step.Content>\n                    <Step.Title>Success</Step.Title>\n                    <Step.Description>Settings saved!</Step.Description>\n                </Step.Content>\n                </Step></Step.Group>\n            </Grid.Column></Grid.Row>\n          : null}\n        <Grid.Row><Grid.Column>\n            <Segment>\n                <Label attached=\"top\">Account</Label>\n                <Form onSubmit={this.updateAcct}>\n                    <Form.Group>\n                        <Form.Input onChange={this.handleChange} type=\"email\" value={this.state.email} name=\"email\" label='Change Email' placeholder='Email' />    \n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Input onChange={this.handleChange} type=\"password\" value={this.state.old_password} name=\"old_password\" label='Change Password' placeholder=\"Enter old password\" />    \n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Input onChange={this.handleChange} type=\"password\" value={this.state.new_password} name=\"new_password\" placeholder='Enter New Password'/>    \n                        <Form.Input onChange={this.handleChange} type=\"password\" value={this.state.new_password_confirm} name=\"new_password_confirm\" placeholder='Confirm New Password' />    \n                    </Form.Group>\n                    <Form.Button>Update</Form.Button>\n                </Form>\n            </Segment>\n        </Grid.Column></Grid.Row>\n        <Grid.Row><Grid.Column>\n            <Segment>\n                <Label attached=\"top\">Profile</Label>\n                <Form onSubmit={this.updateProfile}>\n                    <Form.Group widths='equal'>\n                        <Form.Input onChange={this.handleChange} value={this.state.first_name} name=\"first_name\" label='First Name' placeholder='First name' />\n                        <Form.Input onChange={this.handleChange} value={this.state.last_name} name=\"last_name\" label='Last Name' placeholder='Last name' />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Input onChange={this.handleChange} value={new Date(this.state.dob).toISOString().split(\"T\")[0]} type=\"date\" name=\"dob\" label='Date of Birth' placeholder='DOB' />\n                        <Form.Select\n                                onChange={this.handleChange}\n                                value={this.state.gender}\n                                label='Gender'\n                                name= \"gender\"\n                                options={[{key: \"male\", value: \"Male\", text: \"Male\"}, {key: \"female\", value: \"Female\", text: \"Female\"}]}\n                                placeholder='Select Level'\n                            />\n                    </Form.Group>\n                    <Form.Input onChange={this.handleChange} type=\"phone\" value={this.state.phone} name=\"phone\" label='Phone' placeholder='Phone' />\n                    <Form.Button>Update</Form.Button>\n                </Form>\n            </Segment>\n        </Grid.Column></Grid.Row>\n        {this.props.user.type === \"Manager\"  ?\n            <Grid.Row><Grid.Column>\n                <Segment>\n                    <Label attached=\"top\">System Settings</Label>\n                </Segment>\n            </Grid.Column></Grid.Row>\n        : null } \n        \n      </Grid>\n      \n    )\n  }\n}\n\nconst msp = (state) => {\n  return {\n    user: state.user.user,\n    allTrainers: state.user.allTrainers,\n    allSessions: state.schedule.allSessions,\n    allClients: state.user.allClients,\n    clientPackages: state.app.clientPackages\n  }\n}\n\nexport default connect(msp, {updateUser})(Settings);","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { withRouter, Link } from 'react-router-dom'\nimport { Form, Button, Radio, Segment, Menu, Label} from 'semantic-ui-react';\nimport { API } from '../../App';\n\nimport {setUser, updateUser} from '../../actions/actions'\n\nexport class Signup extends Component {\n\n  state = {\n    email: '',\n    password: '',\n    password_confirm: '',\n    type: 'Client',\n    errors: [],\n  };\n\n  handleChange = (e, {value}) => {\n    let name = \"type\"\n    if(e.target.name){\n      value = e.target.value\n      name = e.target.name\n    }\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  //Upon Login submit, check user auth\n  handleSubmit = event => {\n    event.preventDefault();\n    const { email, password, password_confirm } = this.state;\n\n    if(password !== password_confirm){\n      this.setState({\n        errors: [\"Password and password confirmation must match!\"]\n      })\n      return \n    }\n\n    fetch(`${API}/finduser/${email}`)\n      .then(res => res.json())\n      .then(data => {\n\n        // If the user is valid, log them in and save their password to DB...\n        if (data.user) {\n\n          let user = data.data\n\n          let pwObject = {\n            password: this.state.password\n          }\n\n          fetch(`${API}/users/${user.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"content-type\": \"application/json\",\n                \"accepts\": \"application/json\"\n            },\n            body: JSON.stringify(pwObject)\n          })\n          .then(resp => resp.json())\n          .then(data => {\n\n            if(data.errors){\n              this.props.setUser({});\n\n              localStorage.removeItem(\"user_id\")\n              \n              this.setState({\n                errors: [...data.errors],\n              });\n\n            }else{\n              //cache the user info\n              localStorage.user_id = user.id;\n  \n              //set the user in redux\n              this.props.setUser(user);\n              // this.props.setLoading(true)\n              console.log(\"fetching all the shitsssss LOGIN\")\n              //fetch this user's clients, sessions, and trainers\n              this.props.initialFetch(user)\n            }\n\n          })     \n          \n        // If user is not found via email, set user to null and record errors\n        } else {\n          this.props.setUser({});\n\n          localStorage.removeItem(\"user_id\")\n          \n          this.setState({\n            errors: [...data.errors],\n          });\n        }\n      })\n      .catch(error => console.log('api errors:', error));\n  };\n\n  // Go through errors in state and add to ul\n  handleErrors = () => {\n    return (\n        <ul>\n          {this.state.errors.map(error => {\n            return <li key={error}>{error}</li>;\n          })}\n        </ul>\n    );\n  };\n\n  render() {\n    const { email, password, password_confirm } = this.state\n    return (\n      <div className=\"login\">\n        <Segment>\n          <h1>Register</h1>\n          <Form onSubmit={this.handleSubmit}>\n            <Segment className=\"signup-segment\">\n              <Label attached=\"top\">Enter your Email Address</Label>\n              <Form.Input\n                placeholder=\"email\"\n                type=\"text\"\n                name=\"email\"\n                value={email}\n                onChange={this.handleChange}\n              />\n\n            </Segment>\n            <Segment className=\"signup-segment\">\n            <Label attached=\"top\">Create and Confirm Your Password</Label>\n              <Form.Input\n                placeholder=\"password\"\n                type=\"password\"\n                name=\"password\"\n                value={password}\n                onChange={this.handleChange}\n              />\n              <Form.Input\n                placeholder=\"password confirmation\"\n                type=\"password\"\n                name=\"password_confirm\"\n                value={password_confirm}\n                onChange={this.handleChange}\n              />\n            </Segment>\n            <Segment className=\"signup-segment\" >\n              <Label attached=\"top\">Select User Type</Label>\n              <Form.Group inline>\n              {/* <Grid>\n              <Grid.Row >\n                <Grid.Column width={5}> */}\n                  <Radio\n                    label='Trainer'\n                    name='type'\n                    value='Trainer'\n                    checked={this.state.type === 'Trainer'}\n                    onChange={this.handleChange}\n                  />\n                {/* </Grid.Column>\n                <Grid.Column width={5}> */}\n                  <Radio\n                    label='Manager'\n                    name='type'\n                    value='Manager'\n                    checked={this.state.type === 'Manager'}\n                    onChange={this.handleChange}\n                  />\n                {/* </Grid.Column>\n                <Grid.Column width={5}> */}\n                  <Radio\n                    label='Client'\n                    name='type'\n                    value='Client'\n                    checked={this.state.type === 'Client'}\n                    onChange={this.handleChange}\n                  />\n                {/* </Grid.Column>\n              </Grid.Row>\n            </Grid> */}\n            </Form.Group>\n            </Segment>\n            <Button type=\"submit\">Sign Up</Button>\n          </Form>\n          <Menu text>\n            <Menu.Item><Link to=\"/login\">Or Sign In Here</Link></Menu.Item>\n          </Menu>\n\n          <div>{this.state.errors ? this.handleErrors() : null}</div>\n      </Segment>\n      </div>\n    )\n  }\n}\n\nexport default connect(undefined,{setUser, updateUser})(withRouter(Signup));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { withRouter, Link } from 'react-router-dom'\nimport { Form, Button, Grid, Radio, Segment, Menu } from 'semantic-ui-react';\nimport { API } from '../../App';\n\nimport {setUser, initialFetch, setUserLoading, setAllLoading} from '../../actions/actions'\n\nexport class Login extends Component {\n\n  state = {\n    email: '',\n    password: '',\n    type: 'Manager',\n    errors: '',\n  };\n\n  handleChange = (e, {value}) => {\n    let name = \"type\"\n    if(e.target.name){\n      value = e.target.value\n      name = e.target.name\n    }\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  //Upon login submit, check user auth\n  handleSubmit = event => {\n    event.preventDefault();\n    const { email, password, type } = this.state;\n\n    const user = {\n      email,\n      password,\n      type\n    };\n\n    fetch(`${API}/login`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accept: 'application/json',\n      },\n      body: JSON.stringify(user),\n    })\n      .then(res => res.json())\n      .then(data => {\n    \n        // If the user is valid, log them in...\n        if (data.data) {\n          this.props.setAllLoading(true)\n          this.props.setUserLoading(true)\n          let user = data.data\n\n          //cache the info\n          localStorage.user_id = user.id;\n\n          //set the user in redux\n          this.props.setUser(user);\n          this.props.setUserLoading(false)\n          console.log(\"fetching all the shitsssss LOGIN\")\n          //fetch this user's clients, sessions, and trainers\n          this.props.initialFetch(user)\n          \n        // If user is not valid / found, set user to null and record errors\n        } else {\n          this.props.setUser({});\n          this.props.setUserLoading(false)\n          localStorage.removeItem(\"user_id\")\n          \n          this.setState({\n            errors: data.errors,\n          });\n        }\n      })\n      .catch(error => console.log('api errors:', error));\n  };\n\n  // Go through errors in state and add to ul\n  handleErrors = () => {\n    return (\n        <ul>\n          {this.state.errors.map(error => {\n            return <li key={error}>{error}</li>;\n          })}\n        </ul>\n    );\n  };\n\n  render() {\n    const { email, password } = this.state;\n    return (\n      <div className=\"login\">\n        <Segment>\n          <h1>Log In</h1>\n          <Form onSubmit={this.handleSubmit}>\n            <Form.Input\n              placeholder=\"email\"\n              type=\"text\"\n              name=\"email\"\n              value={email}\n              onChange={this.handleChange}\n            />\n            <Form.Input\n              placeholder=\"password\"\n              type=\"password\"\n              name=\"password\"\n              value={password}\n              onChange={this.handleChange}\n            />\n            <Form.Input >\n            <Form.Group>\n              <Grid>\n              <Grid.Row >\n                <Grid.Column width={5}>\n                  <Radio\n                    label='Trainer'\n                    name='type'\n                    value='Trainer'\n                    checked={this.state.type === 'Trainer'}\n                    onChange={this.handleChange}\n                  />\n                </Grid.Column>\n                <Grid.Column width={5}>\n                  <Radio\n                    label='Manager'\n                    name='type'\n                    value='Manager'\n                    checked={this.state.type === 'Manager'}\n                    onChange={this.handleChange}\n                  />\n                </Grid.Column>\n                <Grid.Column width={5}>\n                  <Radio\n                    label='Client'\n                    name='type'\n                    value='Client'\n                    checked={this.state.type === 'Client'}\n                    onChange={this.handleChange}\n                  />\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n            </Form.Group>\n            </Form.Input>\n            <Button type=\"submit\">Log In</Button>\n          </Form>\n          <Menu text>\n            <Menu.Item>New User?</Menu.Item><Menu.Item><Link to=\"/signup\">Register Here</Link></Menu.Item>\n          </Menu>\n\n          <div>{this.state.errors ? this.handleErrors() : null}</div>\n      </Segment>\n      </div>\n    );\n  }\n}\n\nconst mdp = (dispatch) =>{\n    return {\n      initialFetch: (user) => dispatch(initialFetch(user)),\n      setUser: (user) => dispatch(setUser(user, dispatch)),\n      setUserLoading: (flag) => dispatch(setUserLoading(flag)),\n      setAllLoading: (flag) => dispatch(setAllLoading(flag))\n    }\n}\n\nexport default connect(undefined, mdp)(withRouter(Login));\n","import React  from 'react';\nimport { connect } from 'react-redux'\nimport { Switch, Route, withRouter, Redirect} from 'react-router-dom'\nimport { Segment, Header, Icon} from 'semantic-ui-react'\n\nimport { getUserFromId } from '../helpers/generalHelpers'\nimport Landing from './Landing'\nimport ScheduleContainer from '../containers/schedule/ScheduleContainer'\nimport UsersContainer from '../containers/users/UsersContainer'\nimport UserProfile from '../containers/users/UserProfile'\nimport PackagesContainer from '../containers/packages/PackagesContainer'\nimport Settings from '../containers/navigation/Settings'\nimport Signup from '../containers/navigation/Signup'\nimport Login from '../containers/navigation/Login'\n\nconst MainBody =(props) => {\n\n  const renderLanding = () => {\n    if(!props.user.id && !localStorage.user_id) return <Redirect to=\"/login\"/>\n    return <Landing/>\n  }\n\n  const renderLogin = () => {\n    if(props.user.id) return <Redirect to=\"/\"/>\n      return <Login/>\n  }\n\n  const renderSignup = () => {\n    if(props.user.id) return <Redirect to=\"/\"/>\n      return <Signup/>\n  }\n\n  const renderClients = (routerProps) => {\n    if(!props.user.id && !localStorage.user_id) return <Redirect to=\"/login\"/>\n    if(routerProps.match.params.id){\n      let edit = getUserFromId(parseInt(routerProps.match.params.id), props.allClients)\n      return <UsersContainer back={true} editUser={edit} enterNew={false} showForm={true} allUsers={props.allClients} userType=\"Client\"/>\n    }\n    return <UsersContainer back={false} showForm={false} enterNew={true} allUsers={props.allClients} userType=\"Client\"/>\n  }\n\n  const renderTrainers = (routerProps) => {\n    if(!props.user.id && !localStorage.user_id) return <Redirect to=\"/login\"/>\n\n    if(routerProps.match.params.id){\n        let edit = getUserFromId(parseInt(routerProps.match.params.id), props.allTrainers)\n        return <UsersContainer back={true} editUser={edit} enterNew={false} showForm={true} allUsers={props.allTrainers} userType=\"Trainer\"/>\n      }\n      return <UsersContainer back={false} showForm={false} enterNew={true} allUsers={props.allTrainers} userType=\"Trainer\"/>\n  }\n\n  const renderSchedule = () => {\n\n    if(!props.user.id && !localStorage.user_id) return <Redirect to=\"/login\"/>\n\n    return <ScheduleContainer/>\n  }\n\n  const renderPackages = () => {\n      if(!props.user.id && !localStorage.user_id) return <Redirect to=\"/login\"/>\n\n      return <PackagesContainer/>\n  }\n\n  const renderProfile = (routerProps) => {\n    if(!props.user.id && !localStorage.user_id) return <Redirect to=\"/login\"/>\n\n    let id = parseInt(routerProps.match.params.id)\n    let user = getUserFromId(id, [...props.allTrainers, ...props.allClients])\n    if(user === undefined){\n      props.history.goBack()\n    }else return <UserProfile user={user}/>\n}\n\nconst renderSettings = () => {\n  if(!props.user.id && !localStorage.user_id) return <Redirect to=\"/login\"/>\n  return <Settings/>\n}\n\nconst renderNotFound = () => {\n    return <div><Segment placeholder> \n            <Header icon><Icon name='frown' />Oops! This Page Doesn't Exist...</Header>\n            </Segment></div>\n}\n  \n  return (\n      <div className=\"mainBody\"> \n          <Switch>\n              <Route exact path=\"/landing\" render={renderLanding} />\n              <Route exact path=\"/\" render={renderLanding} />\n              <Route exact path=\"/login\" render={renderLogin} />\n              <Route exact path=\"/signup\" render={renderSignup} />\n              <Route exact path=\"/schedule\" render={renderSchedule} />\n              <Route exact path=\"/trainers\" render={renderTrainers} />\n              <Route exact path=\"/clients\" render={renderClients} />\n              <Route exact path=\"/clients/edit/:id\" render={renderClients} />\n              <Route exact path=\"/trainers/edit/:id\" render={renderTrainers} />\n              <Route exact path=\"/packages\" render={renderPackages} />\n              <Route exact path=\"/settings\" render={renderSettings} />\n              <Route exact path=\"/profile/:id\" render={renderProfile} />\n              <Route render={renderNotFound}/>\n          </Switch>\n      </div>\n  )\n}\n\nconst msp = (state) => {\n    return{\n        user: state.user.user,\n        allTrainers: state.user.allTrainers,\n        allClients: state.user.allClients,\n        allLoading: state.app.allLoading\n    }\n}\n\nexport default connect(msp)(withRouter(MainBody))\n","import React from 'react';\nimport { connect } from 'react-redux'\n\nimport SideBar from './SideBar'\nimport MainBody from './MainBody'\nimport Loading from './Loading'\n\nconst Main = (props) => {\n\n    return (\n        <div className = \"main\">\n            { props.user.id ? <SideBar/> : null}\n            { props.userLoading ? <Loading full={true}/> : <MainBody/> }\n        </div>\n    )\n    \n}\n  \nconst msp = (state) => {\n    return {\n        user: state.user.user,\n        allLoading: state.app.allLoading,\n        userLoading: state.app.userLoading\n    }\n}\n\n\nexport default connect(msp)(Main);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\n\nimport NavBar from './components/NavBar'\nimport Main from './components/Main'\n\nimport {initialFetch, setUser, setUserLoading} from './actions/actions'\n\n// export const API = \"http://localhost:3000/api/v1\"\nexport const API = \"https://training-manager-backend.herokuapp.com/api/v1\"\n\nclass App extends Component {\n\n  state= {\n    \n  }\n\n  componentDidMount(){\n    const user_id = localStorage.user_id;\n  \n    if (user_id) {\n      fetch(`${API}/auto_login`, {\n        headers: {\n          Authorization: user_id,\n        },\n      }).then(res => res.json())\n        .then(data => {\n          \n          //if cached login info fails, clear cache and force login\n          if(data.status !== 200){\n            localStorage.removeItem(\"user_id\")\n            this.props.setUser({})\n\n          //on success keep cached login info and set user\n          }else{\n\n            this.props.setUser(data.data);\n            this.props.setUserLoading(false)\n\n            //fetch this user's clients, sessions, and trainers\n            let user=data.data\n            console.log(\"fetching all the shitsssss autologin\")\n            this.props.initialFetch(user)\n          }\n\n        })\n    }else{\n      this.props.setUserLoading(false)\n    }\n  \n  }\n\nrender(){\n\n    return (\n      <div className=\"app\">\n        <NavBar/>\n       <Main/>\n      </div>\n    )\n  }\n    \n}\n\nconst msp = (state) =>{\n  return {\n    user: state.user.user,\n    allLoading: state.app.allLoading,\n    userLoading: state.app.userLoading,\n    loading: state.app.loading\n  }\n}\n\nconst mdp = (dispatch) =>{\n  return {\n    initialFetch: (user) => dispatch(initialFetch(user)),\n    setUser: (user) => dispatch(setUser(user, dispatch)),\n    setUserLoading: (flag) => dispatch(setUserLoading(flag))\n  }\n}\n\n\nexport default connect(msp, mdp)(withRouter(App));\n","const defaultState = {\n  allSessions: []\n}\n\nfunction scheduleReducer(state= defaultState, action) {\n    switch (action.type) {\n      case \"SET_SESSIONS\":\n        return {...state, allSessions: action.payload}\n\n      case \"ADD_SESSION\":\n        return {...state, allSessions: [...state.allSessions, action.payload]}\n      \n      case \"UPDATE_SESSION\":\n        let newSessions = [...state.allSessions]\n        let index = newSessions.findIndex(ses => ses.id === action.payload.id)\n        newSessions[index] = {...action.payload}\n\n        return {...state, allSessions: [...newSessions]}\n      \n      case \"DELETE_SESSION\":\n        return {...state, allSessions: state.allSessions.filter(ses => ses.id !== action.payload)}\n      \n      default:\n        return state;\n    }\n  }\n  \n  export default scheduleReducer","const defaultState = {\n  user: {},\n  allClients: [],\n  allTrainers: [],\n  allUsers: []\n}\n\nfunction userReducer(state = defaultState, action) {\n    let index, key, newArray\n\n    switch (action.type) {\n      \n      case \"SET_USER\":\n        return {...state, user: action.payload}\n\n      case \"SET_USERS\":\n        \n        key = `all${action.payload.userType}s`\n        return {...state, [key]: action.payload.users} \n\n      case \"ADD_USER\":\n        key = `all${action.payload.userType}s`\n        return {...state, [key]: [...state[key], action.payload.user]} \n\n      case \"UPDATE_USER\":\n        if(action.payload.userType === \"Manager\"){\n          return {...state, user: action.payload.user}\n        }else{\n          key = `all${action.payload.userType}s`\n          newArray = [...state[key]]\n          index = newArray.findIndex(user => user.id === action.payload.user.id)\n          newArray[index] = {...action.payload.user}\n          return {...state, [key]: [...newArray]}\n        }\n\n      case \"DELETE_USER\":\n        key = `all${action.payload.userType}s`\n        index = state[key].findIndex(user => user.id === parseInt(action.payload.id))\n        return {...state, [key]: [...state[key].slice(0, index), ...state[key].slice(index +1)]}\n      \n      default:\n        return state;\n        \n    }\n  }\n\nexport default userReducer\n  ","\n\nconst defaultState = {\n    activePage: 'dashboard',\n    levels: [],\n    packages: [],\n    clientPackages: [],\n    userLoading: true,\n    allLoading: true,\n    loading: true\n  }\n  \nfunction scheduleReducer(state= defaultState, action) {\n    let newArray\n    let index\n    switch (action.type) {\n        case \"SET_ALL_LOADING\":\n            return {...state, allLoading: action.payload}\n        \n        case \"SET_USER_LOADING\":\n            return {...state, userLoading: action.payload}\n\n        case \"SET_ACTIVEPAGE\":\n            return {...state, activePage: action.payload}\n        \n        case \"SET_LEVELS\":\n            return {...state, levels: action.payload}\n        \n        case \"ADD_LEVEL\":\n            return {...state, levels: [...state.packages, action.payload]}\n            \n        case \"UPDATE_LEVEL\":\n            newArray = [...state.levels]\n            index = newArray.findIndex(level => level.id === action.payload.id)\n            newArray[index] = {...action.payload}\n            return {...state, levels: [...newArray]}\n                \n        case \"DELETE_LEVEL\":\n            index = state.levels.findIndex(level => level.id === parseInt(action.payload))\n            return {...state, levels: [...state.levels.slice(0, index), ...state.levels.slice(index +1)]}\n                        \n        case \"SET_PACKAGES\":\n            return {...state, packages: action.payload}\n\n        case \"ADD_PACKAGE\":\n            return {...state, packages: [...state.packages, action.payload]}\n            \n        case \"SET_CLIENT_PACKAGES\":\n            return {...state, clientPackages: action.payload}\n\n        case \"ADD_CLIENT_PACKAGE\":\n            return {...state, clientPackages: [...state.clientPackages, action.payload]}\n        \n        case \"DECREASE_SESSIONS\":\n            newArray = [...state.clientPackages]\n            index = state.clientPackages.findIndex(cp => cp.id === action.payload)\n            newArray[index].session_count -= 1\n            return {...state, clientPackages: [...newArray]}\n    \n        case \"UPDATE_PACKAGE\":\n            newArray = [...state.packages]\n            index = newArray.findIndex(pack => pack.id === action.payload.id)\n            newArray[index] = {...action.payload}\n            return {...state, packages: [...newArray]}\n    \n        case \"DELETE_PACKAGE\":\n            index = state.packages.findIndex(pack => pack.id === parseInt(action.payload))\n            return {...state, packages: [...state.packages.slice(0, index), ...state.packages.slice(index +1)]}\n              \n        default:\n            return state;\n    }\n}\n    \n export default scheduleReducer","import { combineReducers } from \"redux\";\nimport scheduleReducer from './scheduleReducer'\nimport userReducer from './userReducer.js'\nimport appReducer from './appReducer.js'\n\nconst rootReducer = combineReducers({\n    schedule: scheduleReducer,\n    user: userReducer,\n    app: appReducer\n})\n\nexport default rootReducer;","import * as serviceWorker from './serviceWorker'\nimport ActionCableProvider from 'react-actioncable-provider'\n\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\nimport React from 'react'\nimport { createStore, compose, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\n\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\n\nimport './index.css'\nimport App from './App'\n\n\nimport rootReducer from './reducers/rootReducer'\n\nconst API_WS_ROOT = \"ws://training-manager-backend.herokuapp.com/api/v1\"\n\nconst store = createStore(\n    rootReducer, \n    compose(\n        applyMiddleware(thunk), \n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n      )\n)\n\nReactDOM.render(\n    <ActionCableProvider url={API_WS_ROOT}>\n        <Provider store={store}>\n            <Router>\n                <App />\n            </Router>\n        </Provider>\n    </ActionCableProvider>\n    , document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}